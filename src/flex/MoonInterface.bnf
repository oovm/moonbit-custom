{
    parserClass = "com.github.moonbit.parser.MbtiParser"
    parserUtilClass = "com.github.moonbit.psi.MoonParserExtension"

    extends = "com.github.moonbit.psi.AnyMbtiNode"

    psiClassPrefix = "Mbti"
    psiImplClassSuffix = "Node"
    psiPackage = "com.github.moonbit.psi"
    psiImplPackage = "com.github.moonbit.psi_node"

    elementTypeHolderClass = "com.github.moonbit.psi.MbtiTypes"
    elementTypeClass = "com.github.moonbit.psi.MoonElementType"
    tokenTypeClass = "com.github.moonbit.psi.MoonTokenType"

    psiImplUtilClass = "com.github.moonbit.psi_node.MoonPsiExtension"

    tokens = [
        // comment
        COMMENT_DOCUMENT = "Comment Document"
        COMMENT_LINE = "Comment Line"
        COMMENT_BLOCK = "Comment Block"

        PARENTHESIS_L = '('
        PARENTHESIS_R = ')'
        BRACKET_L = '['
        BRACKET_R = ']'
        BRACE_L = '{'
        BRACE_R = '}'

        PLACE_HOLDER = "_"
    ]
}

// https://github.com/bytecodealliance/fluent/blob/master/spec/fluent.ebnf
mbti ::= statements*
private statements ::= SEMICOLON
    | declare-package
    | declare-alias
	| declare-type
	| declare-struct
	| declare-enum
	| declare-trait
	| declare-impl
	| declare-function
// package wasi:blobstore@0.2.0-draft;
declare-package ::= KW_PACKAGE package-path {
	pin = 1
//    mixin = "com.github.bytecodealliance.language.mixin.MixinPackage"
}
package-path ::= identifier (OP_DIV identifier)*;
// =====================================================================================================================
declare-alias ::= KW_ALIAS PARENTHESIS_L (identifier (COMMA identifier)*)? PARENTHESIS_R {
	pin = 1
	//	mixin = "com.github.bytecodealliance.language.mixin.MixinDerive"
}
// =====================================================================================================================
declare-type ::= KW_TYPE identifier {
	pin = 1
//    mixin = "com.github.bytecodealliance.language.mixin.MixinRecord"
}
modifier ::= KW_PUBLIC | KW_PRIVATE;
// =====================================================================================================================
declare-struct   ::= KW_STRUCT identifier struct-body {
	pin = 1
//    mixin = "com.github.bytecodealliance.language.mixin.MixinRecord"
}
struct-body ::= BRACE_L struct-element* BRACE_R
private struct-element ::= SEMICOLON
	| declare-field
declare-field  ::= modifier* identifier COLON type-expression {
//    mixin = "com.github.bytecodealliance.language.mixin.MixinField"
}
// ===========================================================================
declare-enum ::= KW_ENUM identifier enum-body {
	pin = 1
}
enum-body ::= BRACE_L enum-element* BRACE_R
private enum-element ::= SEMICOLON
	| declare-variant
declare-variant ::= identifier declare-parameter?;
// ===========================================================================
declare-function ::= modifier* KW_FN identifier declare-generic? declare-parameter {
	pin = 3
//    mixin = "com.github.bytecodealliance.language.mixin.MixinInterface"
}
// ===========================================================================
declare-parameter ::= PARENTHESIS_L (type-expression (COMMA type-expression)*)? PARENTHESIS_R
// ===========================================================================
declare-generic ::= BRACKET_L (generic-item (COMMA generic-item)*)? BRACKET_R;
generic-item ::= identifier (COLON type-expression)?;
// =====================================================================================================================
declare-trait  ::= KW_TRAIT identifier trait-body {
	pin = 1
    mixin = "com.github.moonbit.mixin.MixinTrait"
}
trait-body ::= BRACE_L trait-element* BRACE_R;
private trait-element ::=
	declare-function
// =====================================================================================================================
declare-impl ::= KW_IMPL identifier impl-body {
	pin = 1
//    mixin = "com.github.bytecodealliance.language.mixin.MixinFlags"
}
impl-body ::= BRACE_L impl-element* BRACE_R;
private impl-element ::= SEMICOLON
	| declare-method
declare-method ::= identifier declare-parameter type-return? {
//	mixin = "com.github.bytecodealliance.language.mixin.MixinMethod"
}
// =====================================================================================================================
type-expression ::= type-expression-item (type-infix type-expression-item)*;
type-expression-item ::= type-prefix* type-expression-atom type-suffix*;
type-expression-atom ::= PARENTHESIS_L type-expression PARENTHESIS_R
	| identifier
type-prefix ::= OP_ADD;
type-infix  ::= OP_ADD | OP_TO;
type-suffix ::= OP_THROW
type-return ::= OP_TO type-expression;
// =====================================================================================================================
unused  ::= DOLLAR | AT | ACCENT
	| KW_WHILE | OP_THEN | OP_OR | KW_LET | KW_MUTABLE | KW_TEST
	| OP_MOD | OP_MUL
	| HYPHEN | DOT
	| INTEGER | OP_LT | OP_LEQ
	| OP_ASSIGN | OP_GT | OP_GEQ
	| OP_REF
	| OP_AND | OP_ADD_ASSIGN
identifier          ::= SYMBOL | ESCAPED;
