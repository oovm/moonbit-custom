// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Moon.flex

package com.github.moonbit;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.github.moonbit.psi.MoonTypes.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;


public class _MoonLexer implements FlexLexer {

  /**
   * This character denotes the end of file
   */
  public static final int YYEOF = -1;

  /**
   * initial size of the lookahead buffer
   */
  private static final int ZZ_BUFFERSIZE = 16384;

  /**
   * lexical states
   */
  public static final int YYINITIAL = 0;
  public static final int StringInterpolation = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   * at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
          0, 0, 1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
          "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

  private static int[] zzUnpackcmap_top() {
    int[] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
          "\11\0\1\1\1\2\2\1\1\2\22\0\1\1\3\0" +
                  "\1\3\1\4\2\0\1\5\1\6\1\7\1\0\1\10" +
                  "\1\11\1\12\1\13\12\14\1\15\1\16\1\17\1\20" +
                  "\1\21\1\0\1\22\32\23\1\24\1\0\1\25\1\26" +
                  "\1\27\1\0\1\30\1\23\1\31\1\32\1\33\1\34" +
                  "\1\35\1\23\1\36\1\23\1\37\1\40\1\41\1\42" +
                  "\1\43\1\44\1\23\1\45\1\46\1\47\1\50\1\51" +
                  "\1\52\1\53\1\54\1\23\1\55\1\0\1\56\7\0" +
                  "\1\1\32\0\1\1\u01df\0\1\1\177\0\13\1\35\0" +
                  "\2\1\5\0\1\1\57\0\1\1\240\0\1\1\377\0";

  private static int[] zzUnpackcmap_blocks() {
    int[] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int[] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
          "\2\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6" +
                  "\1\7\1\10\1\11\1\1\1\12\1\13\1\14\1\15" +
                  "\1\16\1\17\1\20\1\21\1\22\1\23\14\20\1\24" +
                  "\1\25\1\26\1\27\1\0\1\30\3\0\1\31\4\20" +
                  "\1\32\10\20\2\0\13\20\1\33\2\20\1\34\1\0" +
                  "\1\20\1\35\10\20\1\36\2\20\1\37\2\20\1\40" +
                  "\7\20\1\41\1\0\1\20\1\42\1\43\3\20\1\44" +
                  "\2\20\1\37\1\20\1\45\1\20\1\46\1\20\1\47" +
                  "\2\20\1\50\1\20\1\51\1\20\1\52";

  private static int[] zzUnpackAction() {
    int[] result = new int[125];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
          "\0\0\0\57\0\136\0\215\0\136\0\274\0\136\0\136" +
                  "\0\136\0\353\0\136\0\u011a\0\u0149\0\136\0\136\0\136" +
                  "\0\136\0\136\0\136\0\u0178\0\136\0\136\0\136\0\136" +
                  "\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292\0\u02c1\0\u02f0" +
                  "\0\u031f\0\u034e\0\u037d\0\136\0\136\0\274\0\136\0\u03ac" +
                  "\0\u03db\0\u040a\0\u0149\0\u0439\0\u0178\0\u0468\0\u0497\0\u04c6" +
                  "\0\u04f5\0\u0178\0\u0524\0\u0553\0\u0582\0\u05b1\0\u05e0\0\u060f" +
                  "\0\u063e\0\u066d\0\u069c\0\u06cb\0\u06fa\0\u0729\0\u0758\0\u0787" +
                  "\0\u07b6\0\u07e5\0\u0814\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u0178" +
                  "\0\u08ff\0\u092e\0\136\0\u095d\0\u098c\0\u0178\0\u09bb\0\u09ea" +
                  "\0\u0a19\0\u0a48\0\u0a77\0\u0aa6\0\u0ad5\0\u0b04\0\u0178\0\u0b33" +
                  "\0\u0b62\0\u0b91\0\u0bc0\0\u0bef\0\u0178\0\u0c1e\0\u0c4d\0\u0c7c" +
                  "\0\u0cab\0\u0cda\0\u0d09\0\u0d38\0\u0178\0\u0d67\0\u0d96\0\u0178" +
                  "\0\u0178\0\u0dc5\0\u0df4\0\u0e23\0\u0178\0\u0e52\0\u0e81\0\u0d67" +
                  "\0\u0eb0\0\u0178\0\u0edf\0\u0178\0\u0f0e\0\u0178\0\u0f3d\0\u0f6c" +
                  "\0\u0178\0\u0f9b\0\u0178\0\u0fca\0\u0178";

  private static int[] zzUnpackRowMap() {
    int[] result = new int[125];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int[] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
          "\1\3\2\4\1\5\1\6\1\7\1\10\1\3\1\11" +
                  "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21" +
                  "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31" +
                  "\1\32\1\24\1\33\1\34\1\24\1\35\5\24\1\36" +
                  "\1\37\1\24\1\40\1\41\1\42\1\43\2\24\1\44" +
                  "\1\45\57\3\60\0\2\4\65\0\1\46\2\0\1\46" +
                  "\6\0\1\46\4\0\25\46\23\0\1\47\44\0\1\50" +
                  "\3\0\1\51\55\0\1\52\1\0\1\53\53\0\1\54" +
                  "\2\0\1\24\6\0\1\24\4\0\25\24\13\0\1\54" +
                  "\2\0\1\24\6\0\1\24\4\0\16\24\1\55\6\24" +
                  "\13\0\1\54\2\0\1\24\6\0\1\24\4\0\13\24" +
                  "\1\56\11\24\13\0\1\54\2\0\1\24\6\0\1\24" +
                  "\4\0\12\24\1\57\10\24\1\60\1\24\13\0\1\54" +
                  "\2\0\1\24\6\0\1\24\4\0\10\24\1\61\1\24" +
                  "\1\62\12\24\13\0\1\54\2\0\1\24\6\0\1\24" +
                  "\4\0\11\24\1\63\1\64\12\24\13\0\1\54\2\0" +
                  "\1\24\6\0\1\24\4\0\1\65\24\24\13\0\1\54" +
                  "\2\0\1\24\6\0\1\24\4\0\3\24\1\66\21\24" +
                  "\13\0\1\54\2\0\1\24\6\0\1\24\4\0\24\24" +
                  "\1\67\13\0\1\54\2\0\1\24\6\0\1\24\4\0" +
                  "\16\24\1\70\6\24\13\0\1\54\2\0\1\24\6\0" +
                  "\1\24\4\0\1\71\24\24\13\0\1\54\2\0\1\24" +
                  "\6\0\1\24\4\0\13\24\1\72\11\24\2\0\7\50" +
                  "\1\73\47\50\2\51\1\0\54\51\14\0\1\74\65\0" +
                  "\1\24\4\0\25\24\13\0\1\54\2\0\1\24\6\0" +
                  "\1\24\4\0\12\24\1\75\12\24\13\0\1\54\2\0" +
                  "\1\24\6\0\1\24\4\0\20\24\1\76\4\24\13\0" +
                  "\1\54\2\0\1\24\6\0\1\24\4\0\14\24\1\77" +
                  "\10\24\13\0\1\54\2\0\1\24\6\0\1\24\4\0" +
                  "\1\100\24\24\13\0\1\54\2\0\1\24\6\0\1\24" +
                  "\4\0\14\24\1\101\10\24\13\0\1\54\2\0\1\24" +
                  "\6\0\1\24\4\0\1\24\1\102\15\24\1\103\5\24" +
                  "\13\0\1\54\2\0\1\24\6\0\1\24\4\0\1\24" +
                  "\1\104\23\24\13\0\1\54\2\0\1\24\6\0\1\24" +
                  "\4\0\1\24\1\105\14\24\1\106\6\24\13\0\1\54" +
                  "\2\0\1\24\6\0\1\24\4\0\14\24\1\107\10\24" +
                  "\13\0\1\54\2\0\1\24\6\0\1\24\4\0\3\24" +
                  "\1\110\21\24\13\0\1\54\2\0\1\24\6\0\1\24" +
                  "\4\0\15\24\1\111\7\24\13\0\1\54\2\0\1\24" +
                  "\6\0\1\24\4\0\15\24\1\112\7\24\2\0\7\50" +
                  "\1\73\3\50\1\113\43\50\12\0\1\114\1\0\1\74" +
                  "\53\0\1\54\2\0\1\24\6\0\1\24\4\0\16\24" +
                  "\1\115\6\24\13\0\1\54\2\0\1\24\6\0\1\24" +
                  "\4\0\11\24\1\116\13\24\13\0\1\54\2\0\1\24" +
                  "\6\0\1\24\4\0\13\24\1\117\11\24\13\0\1\54" +
                  "\2\0\1\24\6\0\1\24\4\0\5\24\1\120\17\24" +
                  "\13\0\1\54\2\0\1\24\6\0\1\24\4\0\13\24" +
                  "\1\121\11\24\13\0\1\54\2\0\1\24\6\0\1\24" +
                  "\4\0\10\24\1\122\14\24\13\0\1\54\2\0\1\24" +
                  "\6\0\1\24\4\0\3\24\1\123\21\24\13\0\1\54" +
                  "\2\0\1\24\6\0\1\24\4\0\7\24\1\124\15\24" +
                  "\13\0\1\54\2\0\1\24\6\0\1\24\4\0\13\24" +
                  "\1\125\11\24\13\0\1\54\2\0\1\24\6\0\1\24" +
                  "\4\0\13\24\1\126\11\24\13\0\1\54\2\0\1\24" +
                  "\6\0\1\24\4\0\3\24\1\127\21\24\13\0\1\54" +
                  "\2\0\1\24\6\0\1\24\4\0\6\24\1\130\16\24" +
                  "\13\0\1\54\2\0\1\24\6\0\1\24\4\0\10\24" +
                  "\1\131\14\24\16\0\1\132\53\0\1\54\2\0\1\24" +
                  "\6\0\1\24\4\0\17\24\1\133\5\24\13\0\1\54" +
                  "\2\0\1\24\6\0\1\24\4\0\15\24\1\134\7\24" +
                  "\13\0\1\54\2\0\1\24\6\0\1\24\4\0\16\24" +
                  "\1\135\6\24\13\0\1\54\2\0\1\24\6\0\1\24" +
                  "\4\0\15\24\1\136\7\24\13\0\1\54\2\0\1\24" +
                  "\6\0\1\24\4\0\20\24\1\137\4\24\13\0\1\54" +
                  "\2\0\1\24\6\0\1\24\4\0\15\24\1\140\7\24" +
                  "\13\0\1\54\2\0\1\24\6\0\1\24\4\0\1\141" +
                  "\24\24\13\0\1\54\2\0\1\24\6\0\1\24\4\0" +
                  "\15\24\1\142\7\24\13\0\1\54\2\0\1\24\6\0" +
                  "\1\24\4\0\20\24\1\143\4\24\13\0\1\54\2\0" +
                  "\1\24\6\0\1\24\4\0\1\144\24\24\13\0\1\54" +
                  "\2\0\1\24\6\0\1\24\4\0\2\24\1\145\22\24" +
                  "\13\0\1\146\2\0\1\132\53\0\1\54\2\0\1\24" +
                  "\6\0\1\24\4\0\15\24\1\147\7\24\13\0\1\54" +
                  "\2\0\1\24\6\0\1\24\4\0\17\24\1\150\5\24" +
                  "\13\0\1\54\2\0\1\24\6\0\1\24\4\0\17\24" +
                  "\1\151\5\24\13\0\1\54\2\0\1\24\6\0\1\24" +
                  "\4\0\2\24\1\152\22\24\13\0\1\54\2\0\1\24" +
                  "\6\0\1\24\4\0\4\24\1\153\20\24\13\0\1\54" +
                  "\2\0\1\24\6\0\1\24\4\0\5\24\1\154\17\24" +
                  "\13\0\1\54\2\0\1\24\6\0\1\24\4\0\2\24" +
                  "\1\155\22\24\13\0\1\54\2\0\1\24\6\0\1\24" +
                  "\4\0\15\24\1\156\7\24\13\0\1\54\2\0\1\24" +
                  "\6\0\1\24\4\0\12\24\1\157\12\24\13\0\1\160" +
                  "\2\0\1\160\6\0\1\160\4\0\25\160\13\0\1\54" +
                  "\2\0\1\24\6\0\1\24\4\0\20\24\1\161\4\24" +
                  "\13\0\1\54\2\0\1\24\6\0\1\24\4\0\3\24" +
                  "\1\162\21\24\13\0\1\54\2\0\1\24\6\0\1\24" +
                  "\4\0\1\163\24\24\13\0\1\54\2\0\1\24\6\0" +
                  "\1\24\4\0\3\24\1\164\21\24\13\0\1\54\2\0" +
                  "\1\24\6\0\1\24\4\0\1\24\1\165\23\24\13\0" +
                  "\1\54\2\0\1\24\6\0\1\24\4\0\17\24\1\166" +
                  "\5\24\13\0\1\54\2\0\1\24\6\0\1\24\4\0" +
                  "\1\24\1\167\23\24\13\0\1\54\2\0\1\24\6\0" +
                  "\1\24\4\0\1\24\1\170\23\24\13\0\1\54\2\0" +
                  "\1\24\6\0\1\24\4\0\3\24\1\171\21\24\13\0" +
                  "\1\54\2\0\1\24\6\0\1\24\4\0\17\24\1\172" +
                  "\5\24\13\0\1\54\2\0\1\24\6\0\1\24\4\0" +
                  "\3\24\1\173\21\24\13\0\1\54\2\0\1\24\6\0" +
                  "\1\24\4\0\13\24\1\174\11\24\13\0\1\54\2\0"+
                  "\1\24\6\0\1\24\4\0\15\24\1\175\7\24\2\0";

  private static int[] zzUnpacktrans() {
    int[] result = new int[4089];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
          "Unknown internal scanner error",
          "Error: could not match input",
          "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
          "\2\0\1\11\1\1\1\11\1\1\3\11\1\1\1\11" +
                  "\2\1\6\11\1\1\4\11\13\1\2\11\1\1\1\11" +
                  "\1\0\1\1\3\0\16\1\2\0\16\1\1\11\1\0" +
                  "\31\1\1\0\27\1";

  private static int[] zzUnpackAttribute() {
    int[] result = new int[125];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
   the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
   from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /**
   * Number of characters from the last newline up to the start of the matched text.
   */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param in the java.io.Reader to read input from.
   */
  public _MoonLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false}, iff there was new input.
   * @throws java.io.IOException if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   * <p>
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead + pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos - zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   * <p>
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   * <p>
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param errorCode the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number) {
    if (number > yylength())
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return the next token
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ((zzAttributes & 1) == 1) {
        zzAction = zzState;
      }


      zzForAction:
      {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          } else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          } else {
            // store back cached positions
            zzCurrentPos = zzCurrentPosL;
            zzMarkedPos = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL = zzCurrentPos;
            zzMarkedPosL = zzMarkedPos;
            zzBufferL = zzBuffer;
            zzEndReadL = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            } else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ((zzAttributes & 1) == 1) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ((zzAttributes & 8) == 8) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      } else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: {
            return BAD_CHARACTER;
          }
          // fall through
          case 43:
            break;
          case 2: {
            return WHITE_SPACE;
          }
          // fall through
          case 44:
            break;
          case 3: {
            return DOLLAR;
          }
          // fall through
          case 45:
            break;
          case 4: {
            return PARENTHESIS_L;
          }
          // fall through
          case 46:
            break;
          case 5: {
            return PARENTHESIS_R;
          }
          // fall through
          case 47:
            break;
          case 6: {
            return COMMA;
          }
          // fall through
          case 48:
            break;
          case 7: {
            return HYPHEN;
          }
          // fall through
          case 49:
            break;
          case 8: {
            return DOT;
          }
          // fall through
          case 50:
            break;
          case 9: {
            return SLASH;
          }
          // fall through
          case 51:
            break;
          case 10: {
            return COLON;
          }
          // fall through
          case 52:
            break;
          case 11: {
            return SEMICOLON;
          }
          // fall through
          case 53:
            break;
          case 12: {
            return ANGLE_L;
          }
          // fall through
          case 54:
            break;
          case 13: {
            return EQ;
          }
          // fall through
          case 55:
            break;
          case 14: {
            return ANGLE_R;
          }
          // fall through
          case 56:
            break;
          case 15: {
            return AT;
          }
          // fall through
          case 57:
            break;
          case 16: {
            return SYMBOL;
          }
          // fall through
          case 58:
            break;
          case 17: {
            return BRACKET_L;
          }
          // fall through
          case 59:
            break;
          case 18: {
            return BRACKET_R;
          }
          // fall through
          case 60:
            break;
          case 19: {
            return ACCENT;
          }
          // fall through
          case 61:
            break;
          case 20: {
            return BRACE_L;
          }
          // fall through
          case 62:
            break;
          case 21: {
            return BRACE_R;
          }
          // fall through
          case 63:
            break;
          case 22: {
            return ESCAPED;
          }
          // fall through
          case 64:
            break;
          case 23: {
            return TO;
          }
          // fall through
          case 65:
            break;
          case 24: {
            return COMMENT_LINE;
          }
          // fall through
          case 66:
            break;
          case 25: {
            return KW_AS;
          }
          // fall through
          case 67:
            break;
          case 26: {
            return KW_FUNCTION;
          }
          // fall through
          case 68:
            break;
          case 27: {
            return KW_USE;
          }
          // fall through
          case 69:
            break;
          case 28: {
            return COMMENT_BLOCK;
          }
          // fall through
          case 70:
            break;
          case 29: {
            return KW_ENUM;
          }
          // fall through
          case 71:
            break;
          case 30: {
            return KW_TYPE;
          }
          // fall through
          case 72:
            break;
          case 31: {
            return VERSION;
          }
          // fall through
          case 73:
            break;
          case 32: {
            return KW_FLAGS;
          }
          // fall through
          case 74:
            break;
          case 33: {
            return KW_WORLD;
          }
          // fall through
          case 75:
            break;
          case 34: {
            return KW_EXPORT;
          }
          // fall through
          case 76:
            break;
          case 35: {
            return KW_IMPORT;
          }
          // fall through
          case 77:
            break;
          case 36: {
            return KW_RECORD;
          }
          // fall through
          case 78:
            break;
          case 37: {
            return KW_INCLUDE;
          }
          // fall through
          case 79:
            break;
          case 38: {
            return KW_PACKAGE;
          }
          // fall through
          case 80:
            break;
          case 39: {
            return KW_VARIANT;
          }
          // fall through
          case 81:
            break;
          case 40: {
            return KW_RESOURCE;
          }
          // fall through
          case 82:
            break;
          case 41: {
            return KW_INTERFACE;
          }
          // fall through
          case 83: break;
          case 42:
            { return KW_CONSTRUCTOR;
            }
          // fall through
          case 84: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
