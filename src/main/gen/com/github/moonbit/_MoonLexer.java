// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Moon.flex

package com.github.moonbit;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.moonbit.psi.MoonTypes.*;


public class _MoonLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int SingleStringLiteral = 2;
  public static final int DoubleStringLiteral = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\2\u1f00\1\u2200\1\u2300"+
    "\2\u1f00\31\u0100\1\u2400\121\u0100\1\u2500\4\u0100\1\u2600\1\u0100"+
    "\1\u2700\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\53\u0100\1\u2d00"+
    "\41\u1f00\1\u0100\1\u2e00\1\u2f00\1\u3000\1\u3100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u1f00\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u1f00\1\u4d00\1\u4e00\1\u4f00\1\u1f00"+
    "\3\u0100\1\u5000\1\u5100\1\u5200\12\u1f00\4\u0100\1\u5300\17\u1f00"+
    "\2\u0100\1\u5400\41\u1f00\2\u0100\1\u5500\1\u5600\2\u1f00\1\u5700"+
    "\1\u5800\27\u0100\1\u5900\2\u0100\1\u5a00\45\u1f00\1\u0100\1\u5b00"+
    "\1\u5c00\11\u1f00\1\u5d00\24\u1f00\1\u5e00\1\u5f00\1\u1f00\1\u6000"+
    "\1\u6100\1\u6200\1\u6300\2\u1f00\1\u6400\5\u1f00\1\u6500\1\u6600"+
    "\1\u6700\5\u1f00\1\u6800\1\u6900\4\u1f00\1\u6a00\21\u1f00\246\u0100"+
    "\1\u6b00\20\u0100\1\u6c00\1\u6d00\25\u0100\1\u6e00\34\u0100\1\u6f00"+
    "\14\u1f00\2\u0100\1\u7000\u0b06\u1f00\1\u7100\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\2\22\0\1\1\1\3"+
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\6\24\2\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\6\35\5\36\1\37\10\36\1\40\5\36\1\41"+
    "\1\0\1\42\1\43\1\44\1\0\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\36\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\36\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\36\1\74"+
    "\1\75\1\76\1\77\6\0\1\1\32\0\1\1\11\0"+
    "\1\36\12\0\1\36\1\0\1\100\2\0\1\36\5\0"+
    "\27\36\1\0\37\36\1\0\u01ca\36\4\0\14\36\16\0"+
    "\5\36\7\0\1\36\1\0\1\36\21\0\160\100\5\36"+
    "\1\0\2\36\3\0\3\36\1\0\1\36\6\0\1\36"+
    "\1\100\3\36\1\0\1\36\1\0\24\36\1\0\123\36"+
    "\1\0\213\36\1\0\5\100\2\0\246\36\1\0\46\36"+
    "\2\0\1\36\6\0\51\36\10\0\55\100\1\0\1\100"+
    "\1\0\2\100\1\0\2\100\1\0\1\100\10\0\33\36"+
    "\4\0\4\36\35\0\13\100\5\0\53\36\37\100\4\0"+
    "\2\36\1\100\143\36\1\0\1\36\7\100\2\0\6\100"+
    "\2\36\2\100\1\0\4\100\2\36\12\100\3\36\2\0"+
    "\1\36\20\0\1\36\1\100\36\36\33\100\2\0\131\36"+
    "\13\100\1\36\16\0\12\100\41\36\11\100\2\36\4\0"+
    "\1\36\2\0\1\100\2\0\26\36\4\100\1\36\11\100"+
    "\1\36\3\100\1\36\5\100\22\0\31\36\3\100\4\0"+
    "\13\36\65\0\25\36\1\0\10\36\25\0\17\100\1\0"+
    "\41\100\66\36\3\100\1\36\22\100\1\36\7\100\12\36"+
    "\2\100\2\0\12\100\1\0\20\36\3\100\1\0\10\36"+
    "\2\0\2\36\2\0\26\36\1\0\7\36\1\0\1\36"+
    "\3\0\4\36\2\0\1\100\1\36\7\100\2\0\2\100"+
    "\2\0\3\100\1\36\10\0\1\100\4\0\2\36\1\0"+
    "\3\36\2\100\2\0\12\100\2\36\12\0\1\36\1\0"+
    "\1\100\2\0\3\100\1\0\6\36\4\0\2\36\2\0"+
    "\26\36\1\0\7\36\1\0\2\36\1\0\2\36\1\0"+
    "\2\36\2\0\1\100\1\0\5\100\4\0\2\100\2\0"+
    "\3\100\3\0\1\100\7\0\4\36\1\0\1\36\7\0"+
    "\14\100\3\36\1\100\13\0\3\100\1\0\11\36\1\0"+
    "\3\36\1\0\26\36\1\0\7\36\1\0\2\36\1\0"+
    "\5\36\2\0\1\100\1\36\10\100\1\0\3\100\1\0"+
    "\3\100\2\0\1\36\17\0\2\36\2\100\2\0\12\100"+
    "\11\0\1\36\6\100\1\0\3\100\1\0\10\36\2\0"+
    "\2\36\2\0\26\36\1\0\7\36\1\0\2\36\1\0"+
    "\5\36\2\0\1\100\1\36\7\100\2\0\2\100\2\0"+
    "\3\100\10\0\2\100\4\0\2\36\1\0\3\36\2\100"+
    "\2\0\12\100\1\0\1\36\20\0\1\100\1\36\1\0"+
    "\6\36\3\0\3\36\1\0\4\36\3\0\2\36\1\0"+
    "\1\36\1\0\2\36\3\0\2\36\3\0\3\36\3\0"+
    "\14\36\4\0\5\100\3\0\3\100\1\0\4\100\2\0"+
    "\1\36\6\0\1\100\16\0\12\100\20\0\5\100\10\36"+
    "\1\0\3\36\1\0\27\36\1\0\20\36\3\0\1\36"+
    "\7\100\1\0\3\100\1\0\4\100\7\0\2\100\1\0"+
    "\3\36\5\0\2\36\2\100\2\0\12\100\20\0\1\36"+
    "\3\100\1\0\10\36\1\0\3\36\1\0\27\36\1\0"+
    "\12\36\1\0\5\36\2\0\1\100\1\36\7\100\1\0"+
    "\3\100\1\0\4\100\7\0\2\100\7\0\1\36\1\0"+
    "\2\36\2\100\2\0\12\100\1\0\2\36\15\0\4\100"+
    "\1\0\10\36\1\0\3\36\1\0\51\36\2\100\1\36"+
    "\7\100\1\0\3\100\1\0\4\100\1\36\5\0\3\36"+
    "\1\100\7\0\3\36\2\100\2\0\12\100\12\0\6\36"+
    "\2\0\2\100\1\0\22\36\3\0\30\36\1\0\11\36"+
    "\1\0\1\36\2\0\7\36\3\0\1\100\4\0\6\100"+
    "\1\0\1\100\1\0\10\100\6\0\12\100\2\0\2\100"+
    "\15\0\60\36\1\100\1\36\10\100\5\0\7\36\10\100"+
    "\1\0\12\100\47\0\2\36\1\0\1\36\1\0\5\36"+
    "\1\0\30\36\1\0\1\36\1\0\12\36\1\100\1\36"+
    "\12\100\1\36\2\0\5\36\1\0\1\36\1\0\6\100"+
    "\2\0\12\100\2\0\4\36\40\0\1\36\27\0\2\100"+
    "\6\0\12\100\13\0\1\100\1\0\1\100\1\0\1\100"+
    "\4\0\2\100\10\36\1\0\44\36\4\0\24\100\1\0"+
    "\2\100\5\36\13\100\1\0\44\100\11\0\1\100\71\0"+
    "\53\36\24\100\1\36\12\100\6\0\6\36\4\100\4\36"+
    "\3\100\1\36\3\100\2\36\7\100\3\36\4\100\15\36"+
    "\14\100\1\36\17\100\2\0\46\36\1\0\1\36\5\0"+
    "\1\36\2\0\53\36\1\0\115\36\1\0\4\36\2\0"+
    "\7\36\1\0\1\36\1\0\4\36\2\0\51\36\1\0"+
    "\4\36\2\0\41\36\1\0\4\36\2\0\7\36\1\0"+
    "\1\36\1\0\4\36\2\0\17\36\1\0\71\36\1\0"+
    "\4\36\2\0\103\36\2\0\3\100\11\0\11\100\16\0"+
    "\20\36\20\0\126\36\2\0\6\36\3\0\u016c\36\2\0"+
    "\21\36\1\1\32\36\5\0\113\36\3\0\13\36\7\0"+
    "\15\36\1\0\4\36\3\100\13\0\22\36\3\100\13\0"+
    "\22\36\2\100\14\0\15\36\1\0\3\36\1\0\2\100"+
    "\14\0\64\36\40\100\3\0\1\36\4\0\1\36\1\100"+
    "\2\0\12\100\41\0\3\100\2\0\12\100\6\0\131\36"+
    "\7\0\51\36\1\100\1\36\5\0\106\36\12\0\37\36"+
    "\1\0\14\100\4\0\14\100\12\0\12\100\36\36\2\0"+
    "\5\36\13\0\54\36\4\0\32\36\6\0\13\100\45\0"+
    "\27\36\5\100\4\0\65\36\12\100\1\0\35\100\2\0"+
    "\13\100\6\0\12\100\15\0\1\36\10\0\16\100\102\0"+
    "\5\100\57\36\21\100\7\36\4\0\12\100\21\0\11\100"+
    "\14\0\3\100\36\36\15\100\2\36\12\100\54\36\16\100"+
    "\14\0\44\36\24\100\10\0\12\100\3\0\3\36\12\100"+
    "\44\36\2\0\11\36\7\0\53\36\2\0\3\36\20\0"+
    "\3\100\1\0\25\100\4\36\1\100\6\36\1\100\2\36"+
    "\3\100\1\36\5\0\300\36\72\100\1\0\5\100\26\36"+
    "\2\0\6\36\2\0\46\36\2\0\6\36\2\0\10\36"+
    "\1\0\1\36\1\0\1\36\1\0\1\36\1\0\37\36"+
    "\2\0\65\36\1\0\7\36\1\0\1\36\3\0\3\36"+
    "\1\0\7\36\3\0\4\36\2\0\6\36\4\0\15\36"+
    "\5\0\3\36\1\0\7\36\3\0\13\1\35\0\2\1"+
    "\5\0\1\1\17\0\2\100\23\0\1\100\12\0\1\1"+
    "\21\0\1\36\15\0\1\36\20\0\15\36\63\0\15\100"+
    "\4\0\1\100\3\0\14\100\21\0\1\36\4\0\1\36"+
    "\2\0\12\36\1\0\1\36\2\0\6\36\6\0\1\36"+
    "\1\0\1\36\1\0\1\36\1\0\20\36\2\0\4\36"+
    "\5\0\5\36\4\0\1\36\21\0\51\36\u0177\0\57\36"+
    "\1\0\57\36\1\0\205\36\6\0\4\36\3\100\2\36"+
    "\14\0\46\36\1\0\1\36\5\0\1\36\2\0\70\36"+
    "\7\0\1\36\17\0\1\100\27\36\11\0\7\36\1\0"+
    "\7\36\1\0\7\36\1\0\7\36\1\0\7\36\1\0"+
    "\7\36\1\0\7\36\1\0\7\36\1\0\40\100\1\1"+
    "\4\0\3\36\31\0\11\36\6\100\1\0\5\36\2\0"+
    "\5\36\4\0\126\36\2\0\2\100\2\0\3\36\1\0"+
    "\132\36\1\0\4\36\5\0\53\36\1\0\136\36\21\0"+
    "\33\36\65\0\306\36\112\0\360\36\20\0\215\36\103\0"+
    "\56\36\2\0\15\36\3\0\20\36\12\100\2\36\24\0"+
    "\57\36\1\100\4\0\12\100\1\0\37\36\2\100\120\36"+
    "\2\100\45\0\11\36\2\0\147\36\2\0\65\36\2\0"+
    "\5\36\60\0\13\36\1\100\3\36\1\100\4\36\1\100"+
    "\27\36\5\100\30\0\64\36\14\0\2\100\62\36\22\100"+
    "\12\0\12\100\6\0\22\100\6\36\3\0\1\36\1\0"+
    "\2\36\13\100\34\36\10\100\2\0\27\36\15\100\14\0"+
    "\35\36\3\0\4\100\57\36\16\100\16\0\1\36\12\100"+
    "\6\0\5\36\1\100\12\36\12\100\5\36\1\0\51\36"+
    "\16\100\11\0\3\36\1\100\10\36\2\100\2\0\12\100"+
    "\6\0\27\36\3\0\1\36\3\100\62\36\1\100\1\36"+
    "\3\100\2\36\2\100\5\36\2\100\1\36\1\100\1\36"+
    "\30\0\3\36\2\0\13\36\5\100\2\0\3\36\2\100"+
    "\12\0\6\36\2\0\6\36\2\0\6\36\11\0\7\36"+
    "\1\0\7\36\1\0\53\36\1\0\14\36\10\0\163\36"+
    "\10\100\1\0\2\100\2\0\12\100\6\0\244\36\14\0"+
    "\27\36\4\0\61\36\4\0\156\36\2\0\152\36\46\0"+
    "\7\36\14\0\5\36\5\0\1\36\1\100\12\36\1\0"+
    "\15\36\1\0\5\36\1\0\1\36\1\0\2\36\1\0"+
    "\2\36\1\0\154\36\41\0\213\36\6\0\332\36\22\0"+
    "\100\36\2\0\66\36\50\0\12\36\6\0\20\100\20\0"+
    "\20\100\3\0\2\100\30\0\3\100\41\0\1\36\1\0"+
    "\1\36\3\0\1\36\1\0\1\36\1\0\1\36\1\0"+
    "\1\36\1\0\176\36\23\0\12\100\7\0\32\36\4\0"+
    "\1\100\1\0\32\36\13\0\70\36\2\100\37\36\3\0"+
    "\6\36\2\0\6\36\2\0\6\36\2\0\3\36\43\0"+
    "\14\36\1\0\32\36\1\0\23\36\1\0\2\36\1\0"+
    "\17\36\2\0\16\36\42\0\173\36\105\0\65\36\210\0"+
    "\1\100\202\0\35\36\3\0\61\36\17\0\1\100\37\0"+
    "\40\36\15\0\36\36\5\0\46\36\5\100\5\0\36\36"+
    "\2\0\44\36\4\0\10\36\1\0\5\36\52\0\236\36"+
    "\2\0\12\100\6\0\44\36\4\0\44\36\4\0\50\36"+
    "\10\0\64\36\234\0\67\36\11\0\26\36\12\0\10\36"+
    "\230\0\6\36\2\0\1\36\1\0\54\36\1\0\2\36"+
    "\3\0\1\36\2\0\27\36\12\0\27\36\11\0\37\36"+
    "\101\0\23\36\1\0\2\36\12\0\26\36\12\0\32\36"+
    "\106\0\70\36\6\0\2\36\100\0\1\36\3\100\1\0"+
    "\2\100\5\0\4\100\4\36\1\0\3\36\1\0\35\36"+
    "\2\0\3\100\4\0\1\100\40\0\35\36\3\0\35\36"+
    "\43\0\10\36\1\0\34\36\2\100\31\0\66\36\12\0"+
    "\26\36\12\0\23\36\15\0\22\36\156\0\111\36\67\0"+
    "\63\36\15\0\63\36\15\0\44\36\4\100\10\0\12\100"+
    "\306\0\35\36\12\0\1\36\10\0\26\36\13\100\217\0"+
    "\27\36\11\0\3\100\65\36\17\100\37\0\12\100\17\0"+
    "\4\100\55\36\13\100\25\0\31\36\7\0\12\100\6\0"+
    "\3\100\44\36\16\100\1\0\12\100\4\0\1\36\2\100"+
    "\11\0\43\36\1\100\2\0\1\36\11\0\3\100\60\36"+
    "\16\100\4\36\4\0\4\100\3\0\12\100\1\36\1\0"+
    "\1\36\43\0\22\36\1\0\31\36\14\100\6\0\1\100"+
    "\101\0\7\36\1\0\1\36\1\0\4\36\1\0\17\36"+
    "\1\0\12\36\7\0\57\36\14\100\5\0\12\100\6\0"+
    "\4\100\1\0\10\36\2\0\2\36\2\0\26\36\1\0"+
    "\7\36\1\0\2\36\1\0\5\36\1\0\2\100\1\36"+
    "\7\100\2\0\2\100\2\0\3\100\2\0\1\36\6\0"+
    "\1\100\5\0\5\36\2\100\2\0\7\100\3\0\5\100"+
    "\213\0\65\36\22\100\4\36\5\0\12\100\4\0\1\100"+
    "\1\36\40\0\60\36\24\100\2\36\1\0\1\36\10\0"+
    "\12\100\246\0\57\36\7\100\2\0\11\100\27\0\4\36"+
    "\2\100\42\0\60\36\21\100\3\0\1\36\13\0\12\100"+
    "\46\0\53\36\15\100\1\36\7\0\12\100\66\0\33\36"+
    "\2\0\17\100\4\0\12\100\306\0\54\36\17\100\145\0"+
    "\100\36\12\100\25\0\1\36\240\0\10\36\2\0\47\36"+
    "\7\100\2\0\7\100\1\36\1\0\1\36\1\100\33\0"+
    "\1\36\12\100\50\36\7\100\1\36\4\100\10\0\1\100"+
    "\10\0\1\36\13\100\56\36\20\100\3\0\1\36\42\0"+
    "\71\36\7\0\11\36\1\0\45\36\10\100\1\0\10\100"+
    "\1\36\17\0\12\100\30\0\36\36\2\0\26\100\1\0"+
    "\16\100\111\0\7\36\1\0\2\36\1\0\46\36\6\100"+
    "\3\0\1\100\1\0\2\100\1\0\7\100\1\36\1\100"+
    "\10\0\12\100\6\0\6\36\1\0\2\36\1\0\40\36"+
    "\5\100\1\0\2\100\1\0\5\100\1\36\7\0\12\100"+
    "\u0136\0\23\36\4\100\11\0\232\36\146\0\157\36\21\0"+
    "\304\36\274\0\57\36\321\0\107\36\271\0\71\36\7\0"+
    "\37\36\1\0\12\100\146\0\36\36\2\0\5\100\13\0"+
    "\60\36\7\100\11\0\4\36\14\0\12\100\11\0\25\36"+
    "\5\0\23\36\260\0\100\36\200\0\113\36\4\0\1\100"+
    "\1\36\67\100\7\0\4\100\15\36\100\0\2\36\1\0"+
    "\1\36\34\0\370\36\10\0\363\36\15\0\37\36\61\0"+
    "\3\36\21\0\4\36\10\0\u018c\36\4\0\153\36\5\0"+
    "\15\36\3\0\11\36\7\0\12\36\3\0\2\100\306\0"+
    "\5\100\3\0\6\100\10\0\10\100\2\0\7\100\36\0"+
    "\4\100\224\0\3\100\273\0\125\36\1\0\107\36\1\0"+
    "\2\36\2\0\1\36\2\0\2\36\2\0\4\36\1\0"+
    "\14\36\1\0\1\36\1\0\7\36\1\0\101\36\1\0"+
    "\4\36\2\0\10\36\1\0\7\36\1\0\34\36\1\0"+
    "\4\36\1\0\5\36\1\0\1\36\3\0\7\36\1\0"+
    "\u0154\36\2\0\31\36\1\0\31\36\1\0\37\36\1\0"+
    "\31\36\1\0\37\36\1\0\31\36\1\0\37\36\1\0"+
    "\31\36\1\0\37\36\1\0\31\36\1\0\10\36\2\0"+
    "\151\100\4\0\62\100\10\0\1\100\16\0\1\100\26\0"+
    "\5\100\1\0\17\100\120\0\7\100\1\0\21\100\2\0"+
    "\7\100\1\0\2\100\1\0\5\100\325\0\55\36\3\0"+
    "\7\100\7\36\2\0\12\100\4\0\1\36\u0171\0\54\36"+
    "\16\100\6\0\305\36\13\0\7\100\51\0\104\36\7\100"+
    "\1\36\4\0\12\100\246\0\4\36\1\0\33\36\1\0"+
    "\2\36\1\0\1\36\2\0\1\36\1\0\12\36\1\0"+
    "\4\36\1\0\1\36\1\0\1\36\6\0\1\36\4\0"+
    "\1\36\1\0\1\36\1\0\1\36\1\0\3\36\1\0"+
    "\2\36\1\0\1\36\2\0\1\36\1\0\1\36\1\0"+
    "\1\36\1\0\1\36\1\0\1\36\1\0\2\36\1\0"+
    "\1\36\2\0\4\36\1\0\7\36\1\0\4\36\1\0"+
    "\4\36\1\0\1\36\1\0\12\36\1\0\21\36\5\0"+
    "\3\36\1\0\5\36\1\0\21\36\104\0\327\36\51\0"+
    "\65\36\13\0\336\36\2\0\u0182\36\16\0\u0131\36\37\0"+
    "\36\36\342\0\360\100\20\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29184];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\2\20\1\21\1\22\1\23\1\24\1\25"+
            "\1\26\1\27\1\30\1\31\1\32\1\33\20\30\1\34" +
            "\1\1\1\35\1\36\1\37\1\40\1\41\1\42\1\43" +
            "\1\44\1\45\1\46\1\47\1\0\1\50\1\51\2\20" +
            "\1\52\1\53\1\0\1\54\1\55\1\56\1\57\1\60" +
            "\1\61\1\62\7\30\1\63\2\30\1\64\1\30\1\65" +
            "\16\30\1\66\1\67\1\70\1\0\2\52\2\53\1\71" +
            "\1\72\6\30\1\73\2\30\1\74\1\30\1\75\2\30" +
            "\1\76\10\30\1\77\2\71\3\30\1\100\1\101\2\30" +
            "\1\102\1\30\1\103\1\104\3\30\1\105\1\30\1\106" +
            "\1\30\1\107\1\110\3\30\1\111\1\112\1\113\2\30" +
            "\1\114\1\30\1\115\1\30\1\116\1\117\1\120\1\121" +
            "\3\30\1\122\1\30\1\123";

  private static int[] zzUnpackAction() {
    int[] result = new int[182];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
          "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\303\0\u0186" +
                  "\0\303\0\303\0\u01c7\0\303\0\303\0\303\0\303\0\u0208" +
                  "\0\303\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e\0\303" +
                  "\0\u03cf\0\u0410\0\u0451\0\303\0\303\0\u0492\0\303\0\303" +
                  "\0\303\0\u04d3\0\u0514\0\u0555\0\u0596\0\u05d7\0\u0618\0\u0659" +
                  "\0\u069a\0\u06db\0\u071c\0\u075d\0\u079e\0\u07df\0\u0820\0\u0861" +
                  "\0\u08a2\0\303\0\u08e3\0\303\0\303\0\303\0\303\0\303" +
                  "\0\303\0\u0924\0\303\0\303\0\303\0\u0965\0\u09a6\0\u09e7" +
                  "\0\303\0\303\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb\0\303\0\303" +
                  "\0\303\0\303\0\303\0\303\0\303\0\u0b2c\0\u0b6d\0\u0bae" +
                  "\0\u0bef\0\u0c30\0\u0c71\0\u0cb2\0\u0492\0\u0cf3\0\u0d34\0\u0492" +
                  "\0\u0d75\0\u0492\0\u0db6\0\u0df7\0\u0e38\0\u0e79\0\u0eba\0\u0efb" +
                  "\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff\0\u1040\0\u1081\0\u10c2\0\u1103" +
                  "\0\303\0\303\0\303\0\u1144\0\303\0\u1185\0\303\0\u11c6" +
                  "\0\u1207\0\u0492\0\u1248\0\u1289\0\u12ca\0\u130b\0\u134c\0\u138d" +
                  "\0\u0492\0\u13ce\0\u140f\0\u0492\0\u1450\0\u0492\0\u1491\0\u14d2" +
                  "\0\u0492\0\u1513\0\u1554\0\u1595\0\u15d6\0\u1617\0\u1658\0\u1699" +
                  "\0\u16da\0\303\0\303\0\u171b\0\u175c\0\u179d\0\u17de\0\u0492" +
                  "\0\u0492\0\u181f\0\u1860\0\u0492\0\u18a1\0\u0492\0\u0492\0\u18e2" +
                  "\0\u1923\0\u1964\0\u0492\0\u19a5\0\u19e6\0\u1a27\0\u0492\0\u0492" +
                  "\0\u1a68\0\u1aa9\0\u1aea\0\u0492\0\u0492\0\u0492\0\u1b2b\0\u1b6c" +
                  "\0\u0492\0\u1bad\0\u0492\0\u1bee\0\u0492\0\u0492\0\u0492\0\u0492" +
                  "\0\u1c2f\0\u1c70\0\u1cb1\0\u0492\0\u1cf2\0\u0492";

  private static int[] zzUnpackRowMap() {
    int[] result = new int[182];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int[] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
          "\1\4\2\5\1\6\1\7\1\10\1\11\1\12\1\13" +
                  "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23" +
                  "\1\24\1\25\3\26\1\27\1\30\1\31\1\32\1\33" +
                  "\1\34\1\35\4\36\1\37\1\40\1\41\1\36\1\42" +
                  "\1\43\1\44\1\45\1\46\1\47\1\50\1\36\1\51" +
                  "\1\36\1\52\1\53\1\36\1\54\1\55\1\56\1\57" +
                  "\1\60\2\36\1\61\2\36\1\62\1\63\1\64\1\65" +
                  "\1\4\11\66\1\67\73\66\1\70\74\66\102\0\2\5" +
                  "\127\0\1\71\144\0\1\72\13\0\1\73\121\0\1\74" +
                  "\101\0\1\75\66\0\1\76\74\0\1\77\4\0\1\100" +
                  "\7\0\1\101\71\0\4\26\11\0\1\102\1\103\3\0" +
                  "\1\26\1\0\1\104\13\0\1\105\7\0\1\106\30\0" +
                  "\4\26\11\0\1\102\1\103\3\0\1\26\62\0\1\107" +
                  "\102\0\1\110\1\111\100\0\1\112\1\113\77\0\1\114" +
                  "\1\115\70\0\4\36\7\0\4\36\3\0\30\36\4\0" +
                  "\1\36\22\0\4\36\7\0\4\36\3\0\13\36\1\116" +
                  "\14\36\4\0\1\36\22\0\4\36\7\0\4\36\3\0" +
                  "\20\36\1\117\7\36\4\0\1\36\22\0\4\36\7\0" +
                  "\4\36\3\0\16\36\1\120\11\36\4\0\1\36\22\0" +
                  "\4\36\7\0\4\36\3\0\5\36\1\121\22\36\4\0" +
                  "\1\36\22\0\4\36\7\0\4\36\3\0\13\36\1\122" +
                  "\1\36\1\123\10\36\1\124\1\36\4\0\1\36\22\0" +
                  "\4\36\7\0\4\36\3\0\15\36\1\125\1\126\11\36" +
                  "\4\0\1\36\22\0\4\36\7\0\4\36\3\0\23\36" +
                  "\1\127\4\36\4\0\1\36\22\0\4\36\7\0\4\36" +
                  "\3\0\6\36\1\130\5\36\1\131\1\132\12\36\4\0" +
                  "\1\36\22\0\4\36\7\0\4\36\3\0\5\36\1\133" +
                  "\22\36\4\0\1\36\22\0\4\36\7\0\4\36\3\0" +
                  "\1\36\1\134\21\36\1\135\4\36\4\0\1\36\22\0" +
                  "\4\36\7\0\4\36\3\0\17\36\1\136\10\36\4\0" +
                  "\1\36\22\0\4\36\7\0\4\36\3\0\20\36\1\137" +
                  "\2\36\1\140\4\36\4\0\1\36\22\0\4\36\7\0" +
                  "\4\36\3\0\1\36\1\141\3\36\1\142\22\36\4\0" +
                  "\1\36\22\0\4\36\7\0\4\36\3\0\22\36\1\143" +
                  "\5\36\4\0\1\36\22\0\4\36\7\0\4\36\3\0" +
                  "\5\36\1\144\12\36\1\145\6\36\1\146\4\0\1\36" +
                  "\22\0\4\36\7\0\4\36\3\0\10\36\1\147\1\150" +
                  "\16\36\4\0\1\36\32\0\1\151\42\0\1\152\3\0" +
                  "\2\72\1\0\76\72\30\0\1\153\50\0\14\77\1\154" +
                  "\64\77\2\100\1\0\76\100\37\0\1\102\63\0\2\104" +
                  "\13\0\1\155\1\156\3\0\1\104\56\0\3\105\12\0" +
                  "\1\157\1\160\3\0\1\105\56\0\4\161\7\0\1\161" +
                  "\6\0\7\161\50\0\4\36\7\0\4\36\3\0\13\36" +
                  "\1\162\14\36\4\0\1\36\22\0\4\36\7\0\4\36" +
                  "\3\0\5\36\1\163\22\36\4\0\1\36\22\0\4\36" +
                  "\7\0\4\36\3\0\15\36\1\164\12\36\4\0\1\36" +
                  "\22\0\4\36\7\0\4\36\3\0\20\36\1\165\7\36" +
                  "\4\0\1\36\22\0\4\36\7\0\4\36\3\0\21\36" +
                  "\1\166\6\36\4\0\1\36\22\0\4\36\7\0\4\36" +
                  "\3\0\23\36\1\167\4\36\4\0\1\36\22\0\4\36" +
                  "\7\0\4\36\3\0\22\36\1\170\5\36\4\0\1\36" +
                  "\22\0\4\36\7\0\4\36\3\0\20\36\1\171\7\36" +
                  "\4\0\1\36\22\0\4\36\7\0\4\36\3\0\1\36" +
                  "\1\172\26\36\4\0\1\36\22\0\4\36\7\0\4\36" +
                  "\3\0\17\36\1\173\10\36\4\0\1\36\22\0\4\36" +
                  "\7\0\4\36\3\0\22\36\1\174\5\36\4\0\1\36" +
                  "\22\0\4\36\7\0\4\36\3\0\22\36\1\175\5\36" +
                  "\4\0\1\36\22\0\4\36\7\0\4\36\3\0\22\36" +
                  "\1\176\5\36\4\0\1\36\22\0\4\36\7\0\4\36" +
                  "\3\0\5\36\1\177\22\36\4\0\1\36\22\0\4\36" +
                  "\7\0\4\36\3\0\11\36\1\200\16\36\4\0\1\36" +
                  "\22\0\4\36\7\0\4\36\3\0\2\36\1\201\25\36" +
                  "\4\0\1\36\22\0\4\36\7\0\4\36\3\0\11\36" +
                  "\1\202\16\36\4\0\1\36\22\0\4\36\7\0\4\36" +
                  "\3\0\22\36\1\203\5\36\4\0\1\36\22\0\4\36" +
                  "\7\0\4\36\3\0\20\36\1\204\7\36\4\0\1\36" +
                  "\22\0\4\36\7\0\4\36\3\0\21\36\1\205\6\36" +
                  "\4\0\1\36\22\0\4\36\7\0\4\36\3\0\1\36" +
                  "\1\206\26\36\4\0\1\36\22\0\4\36\7\0\4\36" +
                  "\3\0\17\36\1\207\10\36\4\0\1\36\22\0\4\36" +
                  "\7\0\4\36\3\0\11\36\1\210\16\36\4\0\1\36" +
                  "\22\0\4\36\7\0\4\36\3\0\22\36\1\211\5\36" +
                  "\4\0\1\36\14\77\1\154\4\77\1\212\57\77\37\0" +
                  "\1\155\100\0\1\157\63\0\4\161\7\0\1\161\1\0" +
                  "\1\213\1\214\3\0\7\161\50\0\4\36\7\0\4\36" +
                  "\3\0\1\36\1\215\26\36\4\0\1\36\22\0\4\36" +
                  "\7\0\4\36\3\0\22\36\1\216\5\36\4\0\1\36" +
                  "\22\0\4\36\7\0\4\36\3\0\11\36\1\217\16\36" +
                  "\4\0\1\36\22\0\4\36\7\0\4\36\3\0\5\36" +
                  "\1\220\22\36\4\0\1\36\22\0\4\36\7\0\4\36" +
                  "\3\0\14\36\1\221\13\36\4\0\1\36\22\0\4\36" +
                  "\7\0\4\36\3\0\5\36\1\222\22\36\4\0\1\36" +
                  "\22\0\4\36\7\0\4\36\3\0\20\36\1\223\7\36" +
                  "\4\0\1\36\22\0\4\36\7\0\4\36\3\0\13\36" +
                  "\1\224\14\36\4\0\1\36\22\0\4\36\7\0\4\36" +
                  "\3\0\3\36\1\225\24\36\4\0\1\36\22\0\4\36" +
                  "\7\0\4\36\3\0\15\36\1\226\12\36\4\0\1\36" +
                  "\22\0\4\36\7\0\4\36\3\0\24\36\1\227\3\36" +
                  "\4\0\1\36\22\0\4\36\7\0\4\36\3\0\21\36" +
                  "\1\230\6\36\4\0\1\36\22\0\4\36\7\0\4\36" +
                  "\3\0\23\36\1\231\4\36\4\0\1\36\22\0\4\36" +
                  "\7\0\4\36\3\0\23\36\1\232\4\36\4\0\1\36" +
                  "\22\0\4\36\7\0\4\36\3\0\22\36\1\233\5\36" +
                  "\4\0\1\36\22\0\4\36\7\0\4\36\3\0\11\36" +
                  "\1\234\16\36\4\0\1\36\22\0\4\36\7\0\4\36" +
                  "\3\0\5\36\1\235\22\36\4\0\1\36\22\0\4\36" +
                  "\7\0\4\36\3\0\13\36\1\236\14\36\4\0\1\36" +
                  "\22\0\4\36\7\0\4\36\3\0\10\36\1\237\17\36" +
                  "\4\0\1\36\37\0\1\213\63\0\4\36\7\0\4\36" +
                  "\3\0\12\36\1\240\15\36\4\0\1\36\22\0\4\36" +
                  "\7\0\4\36\3\0\11\36\1\241\16\36\4\0\1\36" +
                  "\22\0\4\36\7\0\4\36\3\0\24\36\1\242\3\36" +
                  "\4\0\1\36\22\0\4\36\7\0\4\36\3\0\20\36" +
                  "\1\243\7\36\4\0\1\36\22\0\4\36\7\0\4\36" +
                  "\3\0\4\36\1\244\23\36\4\0\1\36\22\0\4\36" +
                  "\7\0\4\36\3\0\10\36\1\245\17\36\4\0\1\36" +
                  "\22\0\4\36\7\0\4\36\3\0\5\36\1\246\22\36" +
                  "\4\0\1\36\22\0\4\36\7\0\4\36\3\0\20\36" +
                  "\1\247\7\36\4\0\1\36\22\0\4\36\7\0\4\36" +
                  "\3\0\3\36\1\250\24\36\4\0\1\36\22\0\4\36" +
                  "\7\0\4\36\3\0\22\36\1\251\5\36\4\0\1\36" +
                  "\22\0\4\36\7\0\4\36\3\0\1\36\1\252\26\36" +
                  "\4\0\1\36\22\0\4\36\7\0\4\36\3\0\5\36" +
                  "\1\253\22\36\4\0\1\36\22\0\4\36\7\0\4\36" +
                  "\3\0\15\36\1\254\12\36\4\0\1\36\22\0\4\36" +
                  "\7\0\4\36\3\0\5\36\1\255\22\36\4\0\1\36" +
                  "\22\0\4\36\7\0\4\36\3\0\15\36\1\256\12\36" +
                  "\4\0\1\36\22\0\4\36\7\0\4\36\3\0\15\36" +
                  "\1\257\12\36\4\0\1\36\22\0\4\36\7\0\4\36" +
                  "\3\0\22\36\1\260\5\36\4\0\1\36\22\0\4\36" +
                  "\7\0\4\36\3\0\13\36\1\261\14\36\4\0\1\36" +
                  "\22\0\4\36\7\0\4\36\3\0\23\36\1\262\4\36" +
                  "\4\0\1\36\22\0\4\36\7\0\4\36\3\0\11\36" +
                  "\1\263\16\36\4\0\1\36\22\0\4\36\7\0\4\36" +
                  "\3\0\5\36\1\264\22\36\4\0\1\36\22\0\4\36" +
                  "\7\0\4\36\3\0\1\36\1\265\26\36\4\0\1\36" +
                  "\22\0\4\36\7\0\4\36\3\0\21\36\1\266\6\36" +
                  "\4\0\1\36";

  private static int[] zzUnpacktrans() {
    int[] result = new int[7475];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
          "Unknown internal scanner error",
          "Error: could not match input",
          "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
          "\3\0\1\11\2\1\1\11\1\1\2\11\1\1\4\11" +
                  "\1\1\1\11\6\1\1\11\3\1\2\11\1\1\3\11" +
                  "\20\1\1\11\1\1\6\11\1\1\3\11\1\1\1\0" +
                  "\1\1\2\11\3\1\1\0\7\11\33\1\3\11\1\0" +
                  "\1\11\1\1\1\11\32\1\2\11\53\1";

  private static int[] zzUnpackAttribute() {
    int[] result = new int[182];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
   the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
   from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _MoonLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead + pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos - zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number) {
    if (number > yylength())
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return the next token
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ((zzAttributes & 1) == 1) {
        zzAction = zzState;
      }


      zzForAction:
      {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          } else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          } else {
            // store back cached positions
            zzCurrentPos = zzCurrentPosL;
            zzMarkedPos = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL = zzCurrentPos;
            zzMarkedPosL = zzMarkedPos;
            zzBufferL = zzBuffer;
            zzEndReadL = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            } else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ((zzAttributes & 1) == 1) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ((zzAttributes & 8) == 8) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      } else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: {
            return BAD_CHARACTER;
          }
          // fall through
          case 84:
            break;
          case 2: {
            return WHITE_SPACE;
          }
          // fall through
          case 85:
            break;
          case 3: {
            return OP_ERROR;
          }
          // fall through
          case 86:
            break;
          case 4: {
            yybegin(DoubleStringLiteral);
            return DOUBLE_QUOTE_L;
          }
          // fall through
          case 87:
            break;
          case 5: {
            return DOLLAR;
          }
          // fall through
          case 88:
            break;
          case 6: {
            return OP_MOD;
          }
          // fall through
          case 89:
            break;
          case 7: {
            yybegin(SingleStringLiteral);
            return SINGLE_QUOTE_L;
          }
          // fall through
          case 90:
            break;
          case 8: {
            return PARENTHESIS_L;
          }
          // fall through
          case 91:
            break;
          case 9: {
            return PARENTHESIS_R;
          }
          // fall through
          case 92:
            break;
          case 10: {
            return OP_MUL;
          }
          // fall through
          case 93:
            break;
          case 11: {
            return OP_ADD;
          }
          // fall through
          case 94:
            break;
          case 12: {
            return COMMA;
          }
          // fall through
          case 95:
            break;
          case 13: {
            return OP_SUB;
          }
          // fall through
          case 96:
            break;
          case 14: {
            return DOT;
          }
          // fall through
          case 97:
            break;
          case 15: {
            return OP_DIV;
          }
          // fall through
          case 98:
            break;
          case 16: {
            return INTEGER;
          }
          // fall through
          case 99:
            break;
          case 17: {
            return COLON;
          }
          // fall through
          case 100:
            break;
          case 18: {
            return SEMICOLON;
          }
          // fall through
          case 101:
            break;
          case 19: {
            return OP_LT;
          }
          // fall through
          case 102:
            break;
          case 20: {
            return OP_ASSIGN;
          }
          // fall through
          case 103:
            break;
          case 21: {
            return OP_GT;
          }
          // fall through
          case 104:
            break;
          case 22: {
            return OP_THROW;
          }
          // fall through
          case 105:
            break;
          case 23: {
            return AT;
          }
          // fall through
          case 106:
            break;
          case 24: {
            return SYMBOL;
          }
          // fall through
          case 107:
            break;
          case 25: {
            return BRACKET_L;
          }
          // fall through
          case 108:
            break;
          case 26: {
            return BRACKET_R;
          }
          // fall through
          case 109:
            break;
          case 27: {
            return ACCENT;
          }
          // fall through
          case 110:
            break;
          case 28: {
            return BRACE_L;
          }
          // fall through
          case 111:
            break;
          case 29: {
            return BRACE_R;
          }
          // fall through
          case 112:
            break;
          case 30: {
            return OP_REF;
          }
          // fall through
          case 113:
            break;
          case 31: {
            return STRING_TEXT;
          }
          // fall through
          case 114:
            break;
          case 32: {
            yybegin(YYINITIAL);
            return SINGLE_QUOTE_R;
          }
          // fall through
          case 115:
            break;
          case 33: {
            yybegin(YYINITIAL);
            return DOUBLE_QUOTE_R;
          }
          // fall through
          case 116:
            break;
          case 34: {
            return OP_NE;
          }
          // fall through
          case 117:
            break;
          case 35: {
            return STRING_LINE;
          }
          // fall through
          case 118:
            break;
          case 36: {
            return OP_AND;
          }
          // fall through
          case 119:
            break;
          case 37: {
            return OP_ADD_ASSIGN;
          }
          // fall through
          case 120:
            break;
          case 38: {
            return OP_TO;
          }
          // fall through
          case 121:
            break;
          case 39: {
            return OP_SPREAD;
          }
          // fall through
          case 122:
            break;
          case 40: {
            return COMMENT_LINE;
          }
          // fall through
          case 123:
            break;
          case 41: {
            return OP_DIV_ASSIGN;
          }
          // fall through
          case 124:
            break;
          case 42: {
            return BYTES_BIN;
          }
          // fall through
          case 125:
            break;
          case 43: {
            return BYTES_OCT;
          }
          // fall through
          case 126:
            break;
          case 44: {
            return NAME_JOIN;
          }
          // fall through
          case 127:
            break;
          case 45: {
            return OP_LL;
          }
          // fall through
          case 128:
            break;
          case 46: {
            return OP_LEQ;
          }
          // fall through
          case 129:
            break;
          case 47: {
            return OP_EQ;
          }
          // fall through
          case 130:
            break;
          case 48: {
            return OP_PATTERN_TO;
          }
          // fall through
          case 131:
            break;
          case 49: {
            return OP_GEQ;
          }
          // fall through
          case 132:
            break;
          case 50: {
            return OP_GG;
          }
          // fall through
          case 133:
            break;
          case 51: {
            return KW_FN;
          }
          // fall through
          case 134:
            break;
          case 52: {
            return KW_IF;
          }
          // fall through
          case 135:
            break;
          case 53: {
            return KW_IN;
          }
          // fall through
          case 136:
            break;
          case 54: {
            return OP_THEN;
          }
          // fall through
          case 137:
            break;
          case 55: {
            return OP_OR;
          }
          // fall through
          case 138:
            break;
          case 56: {
            return OP_RANGE_TO;
          }
          // fall through
          case 139:
            break;
          case 57: {
            return BYTES_HEX;
          }
          // fall through
          case 140:
            break;
          case 58: {
            return KW_ALL;
          }
          // fall through
          case 141:
            break;
          case 59: {
            return KW_FOR;
          }
          // fall through
          case 142:
            break;
          case 60: {
            return KW_LET;
          }
          // fall through
          case 143:
            break;
          case 61: {
            return KW_MUTABLE;
          }
          // fall through
          case 144:
            break;
          case 62: {
            return KW_PUBLIC;
          }
          // fall through
          case 145:
            break;
          case 63: {
            return COMMENT_BLOCK;
          }
          // fall through
          case 146:
            break;
          case 64: {
            return KW_ELSE;
          }
          // fall through
          case 147:
            break;
          case 65: {
            return KW_ENUM;
          }
          // fall through
          case 148:
            break;
          case 66: {
            return KW_IMPLEMENT;
          }
          // fall through
          case 149:
            break;
          case 67: {
            return KW_OPEN;
          }
          // fall through
          case 150:
            break;
          case 68: {
            return KW_PRIVATE;
          }
          // fall through
          case 151:
            break;
          case 69: {
            return KW_TEST;
          }
          // fall through
          case 152:
            break;
          case 70: {
            return KW_TYPE;
          }
          // fall through
          case 153:
            break;
          case 71: {
            return KW_WITH;
          }
          // fall through
          case 154:
            break;
          case 72: {
            return KW_BREAK;
          }
          // fall through
          case 155:
            break;
          case 73: {
            return KW_GUARD;
          }
          // fall through
          case 156:
            break;
          case 74: {
            return KW_MATCH;
          }
          // fall through
          case 157:
            break;
          case 75: {
            return KW_RAISE;
          }
          // fall through
          case 158:
            break;
          case 76: {
            return KW_TRAIT;
          }
          // fall through
          case 159:
            break;
          case 77: {
            return KW_WHILE;
          }
          // fall through
          case 160:
            break;
          case 78: {
            return KW_DERIVE;
          }
          // fall through
          case 161:
            break;
          case 79: {
            return KW_EXTERN;
          }
          // fall through
          case 162:
            break;
          case 80: {
            return KW_RETURN;
          }
          // fall through
          case 163:
            break;
          case 81: {
            return KW_STRUCT;
          }
          // fall through
          case 164:
            break;
          case 82: {
            return KW_CONTINUE;
          }
          // fall through
          case 165:
            break;
          case 83: {
            return KW_TYPE_ALIAS;
          }
          // fall through
          case 166:
            break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
