// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Moon.flex

package com.github.moonbit;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.moonbit.psi.MoonTypes.*;


public class _MoonLexer implements FlexLexer {

  /**
   * This character denotes the end of file
   */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int DoubleStringLiteral = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
          0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
          "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700" +
                  "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00" +
                  "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500" +
                  "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00" +
                  "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\2\u1f00\1\u2200\1\u2300" +
                  "\2\u1f00\31\u0100\1\u2400\121\u0100\1\u2500\4\u0100\1\u2600\1\u0100" +
                  "\1\u2700\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\53\u0100\1\u2d00" +
                  "\41\u1f00\1\u0100\1\u2e00\1\u2f00\1\u3000\1\u3100\1\u3200\1\u3300" +
                  "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100\1\u3a00" +
                  "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u1f00\1\u4100" +
                  "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900" +
                  "\1\u4a00\1\u4b00\1\u4c00\1\u1f00\1\u4d00\1\u4e00\1\u4f00\1\u1f00" +
                  "\3\u0100\1\u5000\1\u5100\1\u5200\12\u1f00\4\u0100\1\u5300\17\u1f00" +
                  "\2\u0100\1\u5400\41\u1f00\2\u0100\1\u5500\1\u5600\2\u1f00\1\u5700" +
                  "\1\u5800\27\u0100\1\u5900\2\u0100\1\u5a00\45\u1f00\1\u0100\1\u5b00" +
                  "\1\u5c00\11\u1f00\1\u5d00\24\u1f00\1\u5e00\1\u5f00\1\u1f00\1\u6000" +
                  "\1\u6100\1\u6200\1\u6300\2\u1f00\1\u6400\5\u1f00\1\u6500\1\u6600" +
                  "\1\u6700\5\u1f00\1\u6800\1\u6900\4\u1f00\1\u6a00\21\u1f00\246\u0100" +
                  "\1\u6b00\20\u0100\1\u6c00\1\u6d00\25\u0100\1\u6e00\34\u0100\1\u6f00" +
                  "\14\u1f00\2\u0100\1\u7000\u0b06\u1f00\1\u7100\u02fe\u1f00";

  private static int[] zzUnpackcmap_top() {
    int[] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
          "\11\0\1\1\1\2\2\1\1\2\22\0\1\1\1\3" +
                  "\1\4\1\5\1\6\1\7\1\10\1\0\1\11\1\12" +
                  "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22" +
                  "\6\23\2\24\1\25\1\26\1\27\1\30\1\31\1\32" +
                  "\1\33\13\34\1\35\10\34\1\36\5\34\1\37\1\0" +
                  "\1\40\1\41\1\42\1\0\1\43\1\44\1\45\1\34" +
                  "\1\46\1\47\1\34\1\50\1\51\1\34\1\52\1\53" +
                  "\1\54\1\55\1\56\1\57\1\34\1\60\1\61\1\62" +
                  "\1\63\1\64\1\65\1\34\1\66\1\34\1\67\1\70" +
                  "\1\71\1\72\6\0\1\1\32\0\1\1\11\0\1\34" +
                  "\12\0\1\34\1\0\1\73\2\0\1\34\5\0\27\34" +
                  "\1\0\37\34\1\0\u01ca\34\4\0\14\34\16\0\5\34" +
                  "\7\0\1\34\1\0\1\34\21\0\160\73\5\34\1\0" +
                  "\2\34\3\0\3\34\1\0\1\34\6\0\1\34\1\73" +
                  "\3\34\1\0\1\34\1\0\24\34\1\0\123\34\1\0" +
                  "\213\34\1\0\5\73\2\0\246\34\1\0\46\34\2\0" +
                  "\1\34\6\0\51\34\10\0\55\73\1\0\1\73\1\0" +
                  "\2\73\1\0\2\73\1\0\1\73\10\0\33\34\4\0" +
                  "\4\34\35\0\13\73\5\0\53\34\37\73\4\0\2\34" +
                  "\1\73\143\34\1\0\1\34\7\73\2\0\6\73\2\34" +
                  "\2\73\1\0\4\73\2\34\12\73\3\34\2\0\1\34" +
                  "\20\0\1\34\1\73\36\34\33\73\2\0\131\34\13\73" +
                  "\1\34\16\0\12\73\41\34\11\73\2\34\4\0\1\34" +
                  "\2\0\1\73\2\0\26\34\4\73\1\34\11\73\1\34" +
                  "\3\73\1\34\5\73\22\0\31\34\3\73\4\0\13\34" +
                  "\65\0\25\34\1\0\10\34\25\0\17\73\1\0\41\73" +
                  "\66\34\3\73\1\34\22\73\1\34\7\73\12\34\2\73" +
                  "\2\0\12\73\1\0\20\34\3\73\1\0\10\34\2\0" +
                  "\2\34\2\0\26\34\1\0\7\34\1\0\1\34\3\0" +
                  "\4\34\2\0\1\73\1\34\7\73\2\0\2\73\2\0" +
                  "\3\73\1\34\10\0\1\73\4\0\2\34\1\0\3\34" +
                  "\2\73\2\0\12\73\2\34\12\0\1\34\1\0\1\73" +
                  "\2\0\3\73\1\0\6\34\4\0\2\34\2\0\26\34" +
                  "\1\0\7\34\1\0\2\34\1\0\2\34\1\0\2\34" +
                  "\2\0\1\73\1\0\5\73\4\0\2\73\2\0\3\73" +
                  "\3\0\1\73\7\0\4\34\1\0\1\34\7\0\14\73" +
                  "\3\34\1\73\13\0\3\73\1\0\11\34\1\0\3\34" +
                  "\1\0\26\34\1\0\7\34\1\0\2\34\1\0\5\34" +
                  "\2\0\1\73\1\34\10\73\1\0\3\73\1\0\3\73" +
                  "\2\0\1\34\17\0\2\34\2\73\2\0\12\73\11\0" +
                  "\1\34\6\73\1\0\3\73\1\0\10\34\2\0\2\34" +
                  "\2\0\26\34\1\0\7\34\1\0\2\34\1\0\5\34" +
                  "\2\0\1\73\1\34\7\73\2\0\2\73\2\0\3\73" +
                  "\10\0\2\73\4\0\2\34\1\0\3\34\2\73\2\0" +
                  "\12\73\1\0\1\34\20\0\1\73\1\34\1\0\6\34" +
                  "\3\0\3\34\1\0\4\34\3\0\2\34\1\0\1\34" +
                  "\1\0\2\34\3\0\2\34\3\0\3\34\3\0\14\34" +
                  "\4\0\5\73\3\0\3\73\1\0\4\73\2\0\1\34" +
                  "\6\0\1\73\16\0\12\73\20\0\5\73\10\34\1\0" +
                  "\3\34\1\0\27\34\1\0\20\34\3\0\1\34\7\73" +
                  "\1\0\3\73\1\0\4\73\7\0\2\73\1\0\3\34" +
                  "\5\0\2\34\2\73\2\0\12\73\20\0\1\34\3\73" +
                  "\1\0\10\34\1\0\3\34\1\0\27\34\1\0\12\34" +
                  "\1\0\5\34\2\0\1\73\1\34\7\73\1\0\3\73" +
                  "\1\0\4\73\7\0\2\73\7\0\1\34\1\0\2\34" +
                  "\2\73\2\0\12\73\1\0\2\34\15\0\4\73\1\0" +
                  "\10\34\1\0\3\34\1\0\51\34\2\73\1\34\7\73" +
                  "\1\0\3\73\1\0\4\73\1\34\5\0\3\34\1\73" +
                  "\7\0\3\34\2\73\2\0\12\73\12\0\6\34\2\0" +
                  "\2\73\1\0\22\34\3\0\30\34\1\0\11\34\1\0" +
                  "\1\34\2\0\7\34\3\0\1\73\4\0\6\73\1\0" +
                  "\1\73\1\0\10\73\6\0\12\73\2\0\2\73\15\0" +
                  "\60\34\1\73\1\34\10\73\5\0\7\34\10\73\1\0" +
                  "\12\73\47\0\2\34\1\0\1\34\1\0\5\34\1\0" +
                  "\30\34\1\0\1\34\1\0\12\34\1\73\1\34\12\73" +
                  "\1\34\2\0\5\34\1\0\1\34\1\0\6\73\2\0" +
                  "\12\73\2\0\4\34\40\0\1\34\27\0\2\73\6\0" +
                  "\12\73\13\0\1\73\1\0\1\73\1\0\1\73\4\0" +
                  "\2\73\10\34\1\0\44\34\4\0\24\73\1\0\2\73" +
                  "\5\34\13\73\1\0\44\73\11\0\1\73\71\0\53\34" +
                  "\24\73\1\34\12\73\6\0\6\34\4\73\4\34\3\73" +
                  "\1\34\3\73\2\34\7\73\3\34\4\73\15\34\14\73" +
                  "\1\34\17\73\2\0\46\34\1\0\1\34\5\0\1\34" +
                  "\2\0\53\34\1\0\115\34\1\0\4\34\2\0\7\34" +
                  "\1\0\1\34\1\0\4\34\2\0\51\34\1\0\4\34" +
                  "\2\0\41\34\1\0\4\34\2\0\7\34\1\0\1\34" +
                  "\1\0\4\34\2\0\17\34\1\0\71\34\1\0\4\34" +
                  "\2\0\103\34\2\0\3\73\11\0\11\73\16\0\20\34" +
                  "\20\0\126\34\2\0\6\34\3\0\u016c\34\2\0\21\34" +
                  "\1\1\32\34\5\0\113\34\3\0\13\34\7\0\15\34" +
                  "\1\0\4\34\3\73\13\0\22\34\3\73\13\0\22\34" +
                  "\2\73\14\0\15\34\1\0\3\34\1\0\2\73\14\0" +
                  "\64\34\40\73\3\0\1\34\4\0\1\34\1\73\2\0" +
                  "\12\73\41\0\3\73\2\0\12\73\6\0\131\34\7\0" +
                  "\51\34\1\73\1\34\5\0\106\34\12\0\37\34\1\0" +
                  "\14\73\4\0\14\73\12\0\12\73\36\34\2\0\5\34" +
                  "\13\0\54\34\4\0\32\34\6\0\13\73\45\0\27\34" +
                  "\5\73\4\0\65\34\12\73\1\0\35\73\2\0\13\73" +
                  "\6\0\12\73\15\0\1\34\10\0\16\73\102\0\5\73" +
                  "\57\34\21\73\7\34\4\0\12\73\21\0\11\73\14\0" +
                  "\3\73\36\34\15\73\2\34\12\73\54\34\16\73\14\0" +
                  "\44\34\24\73\10\0\12\73\3\0\3\34\12\73\44\34" +
                  "\2\0\11\34\7\0\53\34\2\0\3\34\20\0\3\73" +
                  "\1\0\25\73\4\34\1\73\6\34\1\73\2\34\3\73" +
                  "\1\34\5\0\300\34\72\73\1\0\5\73\26\34\2\0" +
                  "\6\34\2\0\46\34\2\0\6\34\2\0\10\34\1\0" +
                  "\1\34\1\0\1\34\1\0\1\34\1\0\37\34\2\0" +
                  "\65\34\1\0\7\34\1\0\1\34\3\0\3\34\1\0" +
                  "\7\34\3\0\4\34\2\0\6\34\4\0\15\34\5\0" +
                  "\3\34\1\0\7\34\3\0\13\1\35\0\2\1\5\0" +
                  "\1\1\17\0\2\73\23\0\1\73\12\0\1\1\21\0" +
                  "\1\34\15\0\1\34\20\0\15\34\63\0\15\73\4\0" +
                  "\1\73\3\0\14\73\21\0\1\34\4\0\1\34\2\0" +
                  "\12\34\1\0\1\34\2\0\6\34\6\0\1\34\1\0" +
                  "\1\34\1\0\1\34\1\0\20\34\2\0\4\34\5\0" +
                  "\5\34\4\0\1\34\21\0\51\34\u0177\0\57\34\1\0" +
                  "\57\34\1\0\205\34\6\0\4\34\3\73\2\34\14\0" +
                  "\46\34\1\0\1\34\5\0\1\34\2\0\70\34\7\0" +
                  "\1\34\17\0\1\73\27\34\11\0\7\34\1\0\7\34" +
                  "\1\0\7\34\1\0\7\34\1\0\7\34\1\0\7\34" +
                  "\1\0\7\34\1\0\7\34\1\0\40\73\1\1\4\0" +
                  "\3\34\31\0\11\34\6\73\1\0\5\34\2\0\5\34" +
                  "\4\0\126\34\2\0\2\73\2\0\3\34\1\0\132\34" +
                  "\1\0\4\34\5\0\53\34\1\0\136\34\21\0\33\34" +
                  "\65\0\306\34\112\0\360\34\20\0\215\34\103\0\56\34" +
                  "\2\0\15\34\3\0\20\34\12\73\2\34\24\0\57\34" +
                  "\1\73\4\0\12\73\1\0\37\34\2\73\120\34\2\73" +
                  "\45\0\11\34\2\0\147\34\2\0\65\34\2\0\5\34" +
                  "\60\0\13\34\1\73\3\34\1\73\4\34\1\73\27\34" +
                  "\5\73\30\0\64\34\14\0\2\73\62\34\22\73\12\0" +
                  "\12\73\6\0\22\73\6\34\3\0\1\34\1\0\2\34" +
                  "\13\73\34\34\10\73\2\0\27\34\15\73\14\0\35\34" +
                  "\3\0\4\73\57\34\16\73\16\0\1\34\12\73\6\0" +
                  "\5\34\1\73\12\34\12\73\5\34\1\0\51\34\16\73" +
                  "\11\0\3\34\1\73\10\34\2\73\2\0\12\73\6\0" +
                  "\27\34\3\0\1\34\3\73\62\34\1\73\1\34\3\73" +
                  "\2\34\2\73\5\34\2\73\1\34\1\73\1\34\30\0" +
                  "\3\34\2\0\13\34\5\73\2\0\3\34\2\73\12\0" +
                  "\6\34\2\0\6\34\2\0\6\34\11\0\7\34\1\0" +
                  "\7\34\1\0\53\34\1\0\14\34\10\0\163\34\10\73" +
                  "\1\0\2\73\2\0\12\73\6\0\244\34\14\0\27\34" +
                  "\4\0\61\34\4\0\156\34\2\0\152\34\46\0\7\34" +
                  "\14\0\5\34\5\0\1\34\1\73\12\34\1\0\15\34" +
                  "\1\0\5\34\1\0\1\34\1\0\2\34\1\0\2\34" +
                  "\1\0\154\34\41\0\213\34\6\0\332\34\22\0\100\34" +
                  "\2\0\66\34\50\0\12\34\6\0\20\73\20\0\20\73" +
                  "\3\0\2\73\30\0\3\73\41\0\1\34\1\0\1\34" +
                  "\3\0\1\34\1\0\1\34\1\0\1\34\1\0\1\34" +
                  "\1\0\176\34\23\0\12\73\7\0\32\34\4\0\1\73" +
                  "\1\0\32\34\13\0\70\34\2\73\37\34\3\0\6\34" +
                  "\2\0\6\34\2\0\6\34\2\0\3\34\43\0\14\34" +
                  "\1\0\32\34\1\0\23\34\1\0\2\34\1\0\17\34" +
                  "\2\0\16\34\42\0\173\34\105\0\65\34\210\0\1\73" +
                  "\202\0\35\34\3\0\61\34\17\0\1\73\37\0\40\34" +
                  "\15\0\36\34\5\0\46\34\5\73\5\0\36\34\2\0" +
                  "\44\34\4\0\10\34\1\0\5\34\52\0\236\34\2\0" +
                  "\12\73\6\0\44\34\4\0\44\34\4\0\50\34\10\0" +
                  "\64\34\234\0\67\34\11\0\26\34\12\0\10\34\230\0" +
                  "\6\34\2\0\1\34\1\0\54\34\1\0\2\34\3\0" +
                  "\1\34\2\0\27\34\12\0\27\34\11\0\37\34\101\0" +
                  "\23\34\1\0\2\34\12\0\26\34\12\0\32\34\106\0" +
                  "\70\34\6\0\2\34\100\0\1\34\3\73\1\0\2\73" +
                  "\5\0\4\73\4\34\1\0\3\34\1\0\35\34\2\0" +
                  "\3\73\4\0\1\73\40\0\35\34\3\0\35\34\43\0" +
                  "\10\34\1\0\34\34\2\73\31\0\66\34\12\0\26\34" +
                  "\12\0\23\34\15\0\22\34\156\0\111\34\67\0\63\34" +
                  "\15\0\63\34\15\0\44\34\4\73\10\0\12\73\306\0" +
                  "\35\34\12\0\1\34\10\0\26\34\13\73\217\0\27\34" +
                  "\11\0\3\73\65\34\17\73\37\0\12\73\17\0\4\73" +
                  "\55\34\13\73\25\0\31\34\7\0\12\73\6\0\3\73" +
                  "\44\34\16\73\1\0\12\73\4\0\1\34\2\73\11\0" +
                  "\43\34\1\73\2\0\1\34\11\0\3\73\60\34\16\73" +
                  "\4\34\4\0\4\73\3\0\12\73\1\34\1\0\1\34" +
                  "\43\0\22\34\1\0\31\34\14\73\6\0\1\73\101\0" +
                  "\7\34\1\0\1\34\1\0\4\34\1\0\17\34\1\0" +
                  "\12\34\7\0\57\34\14\73\5\0\12\73\6\0\4\73" +
                  "\1\0\10\34\2\0\2\34\2\0\26\34\1\0\7\34" +
                  "\1\0\2\34\1\0\5\34\1\0\2\73\1\34\7\73" +
                  "\2\0\2\73\2\0\3\73\2\0\1\34\6\0\1\73" +
                  "\5\0\5\34\2\73\2\0\7\73\3\0\5\73\213\0" +
                  "\65\34\22\73\4\34\5\0\12\73\4\0\1\73\1\34" +
                  "\40\0\60\34\24\73\2\34\1\0\1\34\10\0\12\73" +
                  "\246\0\57\34\7\73\2\0\11\73\27\0\4\34\2\73" +
                  "\42\0\60\34\21\73\3\0\1\34\13\0\12\73\46\0" +
                  "\53\34\15\73\1\34\7\0\12\73\66\0\33\34\2\0" +
                  "\17\73\4\0\12\73\306\0\54\34\17\73\145\0\100\34" +
                  "\12\73\25\0\1\34\240\0\10\34\2\0\47\34\7\73" +
                  "\2\0\7\73\1\34\1\0\1\34\1\73\33\0\1\34" +
                  "\12\73\50\34\7\73\1\34\4\73\10\0\1\73\10\0" +
                  "\1\34\13\73\56\34\20\73\3\0\1\34\42\0\71\34" +
                  "\7\0\11\34\1\0\45\34\10\73\1\0\10\73\1\34" +
                  "\17\0\12\73\30\0\36\34\2\0\26\73\1\0\16\73" +
                  "\111\0\7\34\1\0\2\34\1\0\46\34\6\73\3\0" +
                  "\1\73\1\0\2\73\1\0\7\73\1\34\1\73\10\0" +
                  "\12\73\6\0\6\34\1\0\2\34\1\0\40\34\5\73" +
                  "\1\0\2\73\1\0\5\73\1\34\7\0\12\73\u0136\0" +
                  "\23\34\4\73\11\0\232\34\146\0\157\34\21\0\304\34" +
                  "\274\0\57\34\321\0\107\34\271\0\71\34\7\0\37\34" +
                  "\1\0\12\73\146\0\36\34\2\0\5\73\13\0\60\34" +
                  "\7\73\11\0\4\34\14\0\12\73\11\0\25\34\5\0" +
                  "\23\34\260\0\100\34\200\0\113\34\4\0\1\73\1\34" +
                  "\67\73\7\0\4\73\15\34\100\0\2\34\1\0\1\34" +
                  "\34\0\370\34\10\0\363\34\15\0\37\34\61\0\3\34" +
                  "\21\0\4\34\10\0\u018c\34\4\0\153\34\5\0\15\34" +
                  "\3\0\11\34\7\0\12\34\3\0\2\73\306\0\5\73" +
                  "\3\0\6\73\10\0\10\73\2\0\7\73\36\0\4\73" +
                  "\224\0\3\73\273\0\125\34\1\0\107\34\1\0\2\34" +
                  "\2\0\1\34\2\0\2\34\2\0\4\34\1\0\14\34" +
                  "\1\0\1\34\1\0\7\34\1\0\101\34\1\0\4\34" +
                  "\2\0\10\34\1\0\7\34\1\0\34\34\1\0\4\34" +
                  "\1\0\5\34\1\0\1\34\3\0\7\34\1\0\u0154\34" +
                  "\2\0\31\34\1\0\31\34\1\0\37\34\1\0\31\34" +
                  "\1\0\37\34\1\0\31\34\1\0\37\34\1\0\31\34" +
                  "\1\0\37\34\1\0\31\34\1\0\10\34\2\0\151\73" +
                  "\4\0\62\73\10\0\1\73\16\0\1\73\26\0\5\73" +
                  "\1\0\17\73\120\0\7\73\1\0\21\73\2\0\7\73" +
                  "\1\0\2\73\1\0\5\73\325\0\55\34\3\0\7\73" +
                  "\7\34\2\0\12\73\4\0\1\34\u0171\0\54\34\16\73" +
                  "\6\0\305\34\13\0\7\73\51\0\104\34\7\73\1\34" +
                  "\4\0\12\73\246\0\4\34\1\0\33\34\1\0\2\34" +
                  "\1\0\1\34\2\0\1\34\1\0\12\34\1\0\4\34" +
                  "\1\0\1\34\1\0\1\34\6\0\1\34\4\0\1\34" +
                  "\1\0\1\34\1\0\1\34\1\0\3\34\1\0\2\34" +
                  "\1\0\1\34\2\0\1\34\1\0\1\34\1\0\1\34" +
                  "\1\0\1\34\1\0\1\34\1\0\2\34\1\0\1\34" +
                  "\2\0\4\34\1\0\7\34\1\0\4\34\1\0\4\34" +
                  "\1\0\1\34\1\0\12\34\1\0\21\34\5\0\3\34" +
                  "\1\0\5\34\1\0\21\34\104\0\327\34\51\0\65\34" +
                  "\13\0\336\34\2\0\u0182\34\16\0\u0131\34\37\0\36\34" +
                  "\342\0\360\73\20\0";

  private static int[] zzUnpackcmap_blocks() {
    int[] result = new int[29184];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int[] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
          "\2\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6" +
                  "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15" +
                  "\1\16\2\17\1\20\1\21\1\22\1\23\1\24\1\25" +
                  "\1\26\1\27\1\30\1\31\1\32\14\27\1\33\1\1" +
                  "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43" +
                  "\1\44\1\45\1\0\1\46\1\47\2\17\1\50\1\51" +
                  "\1\52\1\53\1\54\1\55\1\56\4\27\1\57\1\27" +
                  "\1\60\15\27\1\61\1\62\1\0\4\27\1\63\1\27" +
                  "\1\64\1\27\1\65\1\27\1\66\7\27\1\67\2\27" +
                  "\1\70\1\71\1\72\1\27\1\73\2\27\1\74\1\27" +
                  "\1\75\1\27\1\76\1\77\1\27\1\100\2\27\1\101" +
                  "\1\102\1\27\1\103\1\104\1\27\1\105";

  private static int[] zzUnpackAction() {
    int[] result = new int[135];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
          "\0\0\0\74\0\170\0\264\0\360\0\170\0\u012c\0\170" +
                  "\0\170\0\u0168\0\170\0\170\0\170\0\u01a4\0\170\0\u01e0" +
                  "\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\170\0\u0348\0\u0384" +
                  "\0\u03c0\0\170\0\170\0\u03fc\0\170\0\170\0\170\0\u0438" +
                  "\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618" +
                  "\0\u0654\0\u0690\0\u06cc\0\170\0\u0708\0\170\0\170\0\170" +
                  "\0\170\0\170\0\u0744\0\170\0\170\0\170\0\170\0\u0780" +
                  "\0\u07bc\0\170\0\170\0\u07f8\0\u0834\0\u0870\0\170\0\170" +
                  "\0\170\0\170\0\170\0\u08ac\0\u08e8\0\u0924\0\u0960\0\u03fc" +
                  "\0\u099c\0\u03fc\0\u09d8\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04" +
                  "\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\170" +
                  "\0\170\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u03fc\0\u0e10" +
                  "\0\u03fc\0\u0e4c\0\u03fc\0\u0e88\0\u03fc\0\u0ec4\0\u0f00\0\u0f3c" +
                  "\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\170\0\u1068\0\u10a4\0\u03fc" +
                  "\0\u03fc\0\u03fc\0\u10e0\0\u03fc\0\u111c\0\u1158\0\u03fc\0\u1194" +
                  "\0\u03fc\0\u11d0\0\u03fc\0\u03fc\0\u120c\0\u03fc\0\u1248\0\u1284" +
                  "\0\u03fc\0\u03fc\0\u12c0\0\u03fc\0\u03fc\0\u12fc\0\u03fc";

  private static int[] zzUnpackRowMap() {
    int[] result = new int[135];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int[] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
          "\1\3\2\4\1\5\1\6\1\7\1\10\1\11\1\12" +
                  "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22" +
                  "\1\23\3\24\1\25\1\26\1\27\1\30\1\31\1\32" +
                  "\1\33\3\34\1\35\1\36\1\37\2\34\1\40\1\41" +
                  "\1\42\1\43\1\34\1\44\1\34\1\45\1\46\2\34" +
                  "\1\47\1\50\1\51\1\52\2\34\1\53\1\34\1\54" +
                  "\1\55\1\56\1\57\1\3\4\60\1\61\67\60\75\0" +
                  "\2\4\121\0\1\62\133\0\1\63\13\0\1\64\113\0" +
                  "\1\65\74\0\1\66\61\0\1\67\67\0\1\70\4\0" +
                  "\1\71\7\0\1\72\100\0\1\73\1\74\5\0\1\75" +
                  "\11\0\1\76\36\0\4\24\10\0\1\73\1\74\3\0" +
                  "\1\24\56\0\1\77\76\0\1\100\73\0\1\101\1\102" +
                  "\72\0\1\103\64\0\4\34\7\0\3\34\3\0\25\34" +
                  "\4\0\1\34\21\0\4\34\7\0\3\34\3\0\16\34" +
                  "\1\104\6\34\4\0\1\34\21\0\4\34\7\0\3\34" +
                  "\3\0\14\34\1\105\10\34\4\0\1\34\21\0\4\34" +
                  "\7\0\3\34\3\0\11\34\1\106\1\34\1\107\11\34" +
                  "\4\0\1\34\21\0\4\34\7\0\3\34\3\0\13\34" +
                  "\1\110\1\111\10\34\4\0\1\34\21\0\4\34\7\0" +
                  "\3\34\3\0\5\34\1\112\4\34\1\113\12\34\4\0" +
                  "\1\34\21\0\4\34\7\0\3\34\3\0\4\34\1\114" +
                  "\20\34\4\0\1\34\21\0\4\34\7\0\3\34\3\0" +
                  "\1\34\1\115\17\34\1\116\3\34\4\0\1\34\21\0" +
                  "\4\34\7\0\3\34\3\0\16\34\1\117\2\34\1\120" +
                  "\3\34\4\0\1\34\21\0\4\34\7\0\3\34\3\0" +
                  "\4\34\1\121\20\34\4\0\1\34\21\0\4\34\7\0" +
                  "\3\34\3\0\20\34\1\122\4\34\4\0\1\34\21\0" +
                  "\4\34\7\0\3\34\3\0\4\34\1\123\11\34\1\124" +
                  "\5\34\1\125\4\0\1\34\21\0\4\34\7\0\3\34" +
                  "\3\0\6\34\1\126\1\127\15\34\4\0\1\34\31\0" +
                  "\1\130\36\0\1\131\3\0\2\63\1\0\71\63\13\70" +
                  "\1\132\60\70\2\71\1\0\71\71\35\0\1\73\57\0" +
                  "\2\75\17\0\1\75\52\0\3\76\16\0\1\76\52\0" +
                  "\4\34\7\0\3\34\3\0\4\34\1\133\20\34\4\0" +
                  "\1\34\21\0\4\34\7\0\3\34\3\0\13\34\1\134" +
                  "\11\34\4\0\1\34\21\0\4\34\7\0\3\34\3\0" +
                  "\17\34\1\135\5\34\4\0\1\34\21\0\4\34\7\0" +
                  "\3\34\3\0\21\34\1\136\3\34\4\0\1\34\21\0" +
                  "\4\34\7\0\3\34\3\0\16\34\1\137\6\34\4\0" +
                  "\1\34\21\0\4\34\7\0\3\34\3\0\15\34\1\140" +
                  "\7\34\4\0\1\34\21\0\4\34\7\0\3\34\3\0" +
                  "\20\34\1\141\4\34\4\0\1\34\21\0\4\34\7\0" +
                  "\3\34\3\0\20\34\1\142\4\34\4\0\1\34\21\0" +
                  "\4\34\7\0\3\34\3\0\20\34\1\143\4\34\4\0" +
                  "\1\34\21\0\4\34\7\0\3\34\3\0\7\34\1\144" +
                  "\15\34\4\0\1\34\21\0\4\34\7\0\3\34\3\0" +
                  "\2\34\1\145\22\34\4\0\1\34\21\0\4\34\7\0" +
                  "\3\34\3\0\20\34\1\146\4\34\4\0\1\34\21\0" +
                  "\4\34\7\0\3\34\3\0\16\34\1\147\6\34\4\0" +
                  "\1\34\21\0\4\34\7\0\3\34\3\0\17\34\1\150" +
                  "\5\34\4\0\1\34\21\0\4\34\7\0\3\34\3\0" +
                  "\1\34\1\151\23\34\4\0\1\34\21\0\4\34\7\0" +
                  "\3\34\3\0\15\34\1\152\7\34\4\0\1\34\21\0" +
                  "\4\34\7\0\3\34\3\0\7\34\1\153\15\34\4\0" +
                  "\1\34\21\0\4\34\7\0\3\34\3\0\20\34\1\154" +
                  "\4\34\4\0\1\34\13\70\1\132\4\70\1\155\53\70" +
                  "\21\0\4\34\7\0\3\34\3\0\1\34\1\156\23\34" +
                  "\4\0\1\34\21\0\4\34\7\0\3\34\3\0\20\34" +
                  "\1\157\4\34\4\0\1\34\21\0\4\34\7\0\3\34" +
                  "\3\0\4\34\1\160\20\34\4\0\1\34\21\0\4\34" +
                  "\7\0\3\34\3\0\12\34\1\161\12\34\4\0\1\34" +
                  "\21\0\4\34\7\0\3\34\3\0\11\34\1\162\13\34" +
                  "\4\0\1\34\21\0\4\34\7\0\3\34\3\0\3\34" +
                  "\1\163\21\34\4\0\1\34\21\0\4\34\7\0\3\34" +
                  "\3\0\22\34\1\164\2\34\4\0\1\34\21\0\4\34" +
                  "\7\0\3\34\3\0\21\34\1\165\3\34\4\0\1\34" +
                  "\21\0\4\34\7\0\3\34\3\0\21\34\1\166\3\34" +
                  "\4\0\1\34\21\0\4\34\7\0\3\34\3\0\20\34" +
                  "\1\167\4\34\4\0\1\34\21\0\4\34\7\0\3\34" +
                  "\3\0\7\34\1\170\15\34\4\0\1\34\21\0\4\34" +
                  "\7\0\3\34\3\0\4\34\1\171\20\34\4\0\1\34" +
                  "\21\0\4\34\7\0\3\34\3\0\11\34\1\172\13\34" +
                  "\4\0\1\34\21\0\4\34\7\0\3\34\3\0\6\34" +
                  "\1\173\16\34\4\0\1\34\21\0\4\34\7\0\3\34" +
                  "\3\0\10\34\1\174\14\34\4\0\1\34\21\0\4\34" +
                  "\7\0\3\34\3\0\7\34\1\175\15\34\4\0\1\34" +
                  "\21\0\4\34\7\0\3\34\3\0\6\34\1\176\16\34" +
                  "\4\0\1\34\21\0\4\34\7\0\3\34\3\0\16\34" +
                  "\1\177\6\34\4\0\1\34\21\0\4\34\7\0\3\34" +
                  "\3\0\3\34\1\200\21\34\4\0\1\34\21\0\4\34" +
                  "\7\0\3\34\3\0\20\34\1\201\4\34\4\0\1\34" +
                  "\21\0\4\34\7\0\3\34\3\0\4\34\1\202\20\34" +
                  "\4\0\1\34\21\0\4\34\7\0\3\34\3\0\13\34" +
                  "\1\203\11\34\4\0\1\34\21\0\4\34\7\0\3\34" +
                  "\3\0\13\34\1\204\11\34\4\0\1\34\21\0\4\34" +
                  "\7\0\3\34\3\0\20\34\1\205\4\34\4\0\1\34" +
                  "\21\0\4\34\7\0\3\34\3\0\21\34\1\206\3\34" +
                  "\4\0\1\34\21\0\4\34\7\0\3\34\3\0\4\34" +
                  "\1\207\20\34\4\0\1\34";

  private static int[] zzUnpacktrans() {
    int[] result = new int[4920];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
          "Unknown internal scanner error",
          "Error: could not match input",
          "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
          "\2\0\1\11\2\1\1\11\1\1\2\11\1\1\3\11" +
                  "\1\1\1\11\6\1\1\11\3\1\2\11\1\1\3\11" +
                  "\14\1\1\11\1\1\5\11\1\1\4\11\1\0\1\1" +
                  "\2\11\3\1\5\11\24\1\2\11\1\0\22\1\1\11" +
                  "\32\1";

  private static int[] zzUnpackAttribute() {
    int[] result = new int[135];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
   the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
   from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _MoonLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos -zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number) {
    if (number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return the next token
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ((zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          } else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          } else {
            // store back cached positions
            zzCurrentPos = zzCurrentPosL;
            zzMarkedPos = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL = zzCurrentPos;
            zzMarkedPosL = zzMarkedPos;
            zzBufferL = zzBuffer;
            zzEndReadL = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            } else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ((zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ((zzAttributes & 8) == 8) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      } else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: {
            return BAD_CHARACTER;
          }
          // fall through
          case 70:
            break;
          case 2: {
            return WHITE_SPACE;
          }
          // fall through
          case 71:
            break;
          case 3: {
            return OP_ERROR;
          }
          // fall through
          case 72:
            break;
          case 4: {
            yybegin(DoubleStringLiteral);
            return DOUBLE_QUOTE_L;
          }
          // fall through
          case 73:
            break;
          case 5: {
            return DOLLAR;
          }
          // fall through
          case 74:
            break;
          case 6: {
            return OP_MOD;
          }
          // fall through
          case 75:
            break;
          case 7: {
            return PARENTHESIS_L;
            }
          // fall through
          case 76:
            break;
          case 8: {
            return PARENTHESIS_R;
            }
          // fall through
          case 77:
            break;
          case 9: {
            return OP_MUL;
            }
          // fall through
          case 78:
            break;
          case 10: {
            return OP_ADD;
            }
          // fall through
          case 79:
            break;
          case 11: {
            return COMMA;
          }
          // fall through
          case 80:
            break;
          case 12: {
            return OP_SUB;
            }
          // fall through
          case 81:
            break;
          case 13: { return DOT;
            }
          // fall through
          case 82:
            break;
          case 14: {
            return OP_DIV;
            }
          // fall through
          case 83:
            break;
          case 15: {
            return INTEGER;
            }
          // fall through
          case 84:
            break;
          case 16: {
            return COLON;
            }
          // fall through
          case 85:
            break;
          case 17: {
            return SEMICOLON;
            }
          // fall through
          case 86:
            break;
          case 18: {
            return OP_LT;
            }
          // fall through
          case 87:
            break;
          case 19: {
            return OP_ASSIGN;
            }
          // fall through
          case 88:
            break;
          case 20: {
            return OP_GT;
            }
          // fall through
          case 89:
            break;
          case 21: {
            return OP_THROW;
            }
          // fall through
          case 90:
            break;
          case 22: { return AT;
            }
          // fall through
          case 91:
            break;
          case 23: {
            return SYMBOL;
            }
          // fall through
          case 92:
            break;
          case 24: {
            return BRACKET_L;
            }
          // fall through
          case 93:
            break;
          case 25: {
            return BRACKET_R;
            }
          // fall through
          case 94:
            break;
          case 26: {
            return ACCENT;
            }
          // fall through
          case 95:
            break;
          case 27: {
            return BRACE_L;
            }
          // fall through
          case 96:
            break;
          case 28: {
            return BRACE_R;
            }
          // fall through
          case 97:
            break;
          case 29: {
            return OP_REF;
            }
          // fall through
          case 98:
            break;
          case 30: {
            return STRING_TEXT;
            }
          // fall through
          case 99:
            break;
          case 31: {
            yybegin(YYINITIAL);
            return DOUBLE_QUOTE_R;
            }
          // fall through
          case 100:
            break;
          case 32: {
            return OP_NE;
          }
          // fall through
          case 101:
            break;
          case 33: {
            return STRING_LINE;
            }
          // fall through
          case 102:
            break;
          case 34: {
            return OP_AND;
            }
          // fall through
          case 103:
            break;
          case 35: {
            return OP_ADD_ASSIGN;
            }
          // fall through
          case 104:
            break;
          case 36: {
            return OP_TO;
            }
          // fall through
          case 105:
            break;
          case 37: {
            return OP_SPREAD;
            }
          // fall through
          case 106:
            break;
          case 38: {
            return COMMENT_LINE;
            }
          // fall through
          case 107:
            break;
          case 39: {
            return OP_DIV_ASSIGN;
            }
          // fall through
          case 108:
            break;
          case 40: {
            return BYTES_BIN;
            }
          // fall through
          case 109:
            break;
          case 41: {
            return BYTES_OCT;
            }
          // fall through
          case 110:
            break;
          case 42: {
            return NAME_JOIN;
            }
          // fall through
          case 111:
            break;
          case 43: {
            return OP_LEQ;
            }
          // fall through
          case 112:
            break;
          case 44: {
            return OP_EQ;
            }
          // fall through
          case 113:
            break;
          case 45: {
            return OP_PATTERN_TO;
            }
          // fall through
          case 114:
            break;
          case 46: {
            return OP_GEQ;
            }
          // fall through
          case 115:
            break;
          case 47: {
            return KW_FN;
            }
          // fall through
          case 116:
            break;
          case 48: {
            return KW_IF;
            }
          // fall through
          case 117:
            break;
          case 49: {
            return OP_THEN;
            }
          // fall through
          case 118:
            break;
          case 50: {
            return OP_OR;
            }
          // fall through
          case 119:
            break;
          case 51: {
            return KW_FOR;
            }
          // fall through
          case 120:
            break;
          case 52: {
            return KW_LET;
            }
          // fall through
          case 121:
            break;
          case 53: {
            return KW_MUTABLE;
          }
          // fall through
          case 122:
            break;
          case 54: {
            return KW_PUBLIC;
            }
          // fall through
          case 123:
            break;
          case 55: {
            return COMMENT_BLOCK;
            }
          // fall through
          case 124:
            break;
          case 56: {
            return KW_ELSE;
          }
          // fall through
          case 125:
            break;
          case 57: {
            return KW_ENUM;
          }
          // fall through
          case 126:
            break;
          case 58: {
            return KW_IMPLEMENT;
          }
          // fall through
          case 127:
            break;
          case 59: {
            return KW_PRIVATE;
          }
          // fall through
          case 128:
            break;
          case 60: {
            return KW_TEST;
          }
          // fall through
          case 129:
            break;
          case 61: {
            return KW_TYPE;
          }
          // fall through
          case 130:
            break;
          case 62: {
            return KW_WITH;
          }
          // fall through
          case 131:
            break;
          case 63: {
            return KW_BREAK;
          }
          // fall through
          case 132:
            break;
          case 64: {
            return KW_MATCH;
          }
          // fall through
          case 133:
            break;
          case 65: {
            return KW_TRAIT;
          }
          // fall through
          case 134:
            break;
          case 66: {
            return KW_WHILE;
          }
          // fall through
          case 135:
            break;
          case 67: {
            return KW_RETURN;
          }
          // fall through
          case 136:
            break;
          case 68: {
            return KW_STRUCT;
          }
          // fall through
          case 137:
            break;
          case 69: {
            return KW_CONTINUE;
          }
          // fall through
          case 138: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
