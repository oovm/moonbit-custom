// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Moon.flex

package com.github.moonbit;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.github.moonbit.psi.MoonTypes.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;


public class _MoonLexer implements FlexLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int StringInterpolation = 2;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1
    };

    /**
     * Top-level table for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();

    private static final String ZZ_CMAP_TOP_PACKED_0 =
            "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700" +
                    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00" +
                    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500" +
                    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00" +
                    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\2\u1f00\1\u2200\1\u2300" +
                    "\2\u1f00\31\u0100\1\u2400\121\u0100\1\u2500\4\u0100\1\u2600\1\u0100" +
                    "\1\u2700\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\53\u0100\1\u2d00" +
                    "\41\u1f00\1\u0100\1\u2e00\1\u2f00\1\u3000\1\u3100\1\u3200\1\u3300" +
                    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100\1\u3a00" +
                    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u1f00\1\u4100" +
                    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900" +
                    "\1\u4a00\1\u4b00\1\u4c00\1\u1f00\1\u4d00\1\u4e00\1\u4f00\1\u1f00" +
                    "\3\u0100\1\u5000\1\u5100\1\u5200\12\u1f00\4\u0100\1\u5300\17\u1f00" +
                    "\2\u0100\1\u5400\41\u1f00\2\u0100\1\u5500\1\u5600\2\u1f00\1\u5700" +
                    "\1\u5800\27\u0100\1\u5900\2\u0100\1\u5a00\45\u1f00\1\u0100\1\u5b00" +
                    "\1\u5c00\11\u1f00\1\u5d00\24\u1f00\1\u5e00\1\u5f00\1\u1f00\1\u6000" +
                    "\1\u6100\1\u6200\1\u6300\2\u1f00\1\u6400\5\u1f00\1\u6500\1\u6600" +
                    "\1\u6700\5\u1f00\1\u6800\1\u6900\4\u1f00\1\u6a00\21\u1f00\246\u0100" +
                    "\1\u6b00\20\u0100\1\u6c00\1\u6d00\25\u0100\1\u6e00\34\u0100\1\u6f00" +
                    "\14\u1f00\2\u0100\1\u7000\u0b06\u1f00\1\u7100\u02fe\u1f00";

    private static int[] zzUnpackcmap_top() {
        int[] result = new int[4352];
        int offset = 0;
        offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_top(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Second-level tables for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

    private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
            "\11\0\1\1\1\2\2\1\1\2\22\0\1\1\3\0" +
                    "\1\3\3\0\1\4\1\5\1\6\1\7\1\10\1\11" +
                    "\1\12\1\13\1\14\11\15\1\16\1\17\1\20\1\21" +
                    "\1\22\1\0\1\23\13\24\1\25\16\24\1\26\1\0" +
                    "\1\27\1\30\1\31\1\0\1\32\1\33\1\34\1\24" +
                    "\1\35\1\36\1\24\1\37\1\40\2\24\1\41\1\42" +
                    "\1\43\1\24\1\44\1\24\1\45\1\46\1\47\1\50" +
                    "\1\51\1\52\1\24\1\53\1\24\1\54\1\0\1\55" +
                    "\7\0\1\1\32\0\1\1\11\0\1\24\12\0\1\24" +
                    "\1\0\1\56\2\0\1\24\5\0\27\24\1\0\37\24" +
                    "\1\0\u01ca\24\4\0\14\24\16\0\5\24\7\0\1\24" +
                    "\1\0\1\24\21\0\160\56\5\24\1\0\2\24\3\0" +
                    "\3\24\1\0\1\24\6\0\1\24\1\56\3\24\1\0" +
                    "\1\24\1\0\24\24\1\0\123\24\1\0\213\24\1\0" +
                    "\5\56\2\0\246\24\1\0\46\24\2\0\1\24\6\0" +
                    "\51\24\10\0\55\56\1\0\1\56\1\0\2\56\1\0" +
                    "\2\56\1\0\1\56\10\0\33\24\4\0\4\24\35\0" +
                    "\13\56\5\0\53\24\37\56\4\0\2\24\1\56\143\24" +
                    "\1\0\1\24\7\56\2\0\6\56\2\24\2\56\1\0" +
                    "\4\56\2\24\12\56\3\24\2\0\1\24\20\0\1\24" +
                    "\1\56\36\24\33\56\2\0\131\24\13\56\1\24\16\0" +
                    "\12\56\41\24\11\56\2\24\4\0\1\24\2\0\1\56" +
                    "\2\0\26\24\4\56\1\24\11\56\1\24\3\56\1\24" +
                    "\5\56\22\0\31\24\3\56\4\0\13\24\65\0\25\24" +
                    "\1\0\10\24\25\0\17\56\1\0\41\56\66\24\3\56" +
                    "\1\24\22\56\1\24\7\56\12\24\2\56\2\0\12\56" +
                    "\1\0\20\24\3\56\1\0\10\24\2\0\2\24\2\0" +
                    "\26\24\1\0\7\24\1\0\1\24\3\0\4\24\2\0" +
                    "\1\56\1\24\7\56\2\0\2\56\2\0\3\56\1\24" +
                    "\10\0\1\56\4\0\2\24\1\0\3\24\2\56\2\0" +
                    "\12\56\2\24\12\0\1\24\1\0\1\56\2\0\3\56" +
                    "\1\0\6\24\4\0\2\24\2\0\26\24\1\0\7\24" +
                    "\1\0\2\24\1\0\2\24\1\0\2\24\2\0\1\56" +
                    "\1\0\5\56\4\0\2\56\2\0\3\56\3\0\1\56" +
                    "\7\0\4\24\1\0\1\24\7\0\14\56\3\24\1\56" +
                    "\13\0\3\56\1\0\11\24\1\0\3\24\1\0\26\24" +
                    "\1\0\7\24\1\0\2\24\1\0\5\24\2\0\1\56" +
                    "\1\24\10\56\1\0\3\56\1\0\3\56\2\0\1\24" +
                    "\17\0\2\24\2\56\2\0\12\56\11\0\1\24\6\56" +
                    "\1\0\3\56\1\0\10\24\2\0\2\24\2\0\26\24" +
                    "\1\0\7\24\1\0\2\24\1\0\5\24\2\0\1\56" +
                    "\1\24\7\56\2\0\2\56\2\0\3\56\10\0\2\56" +
                    "\4\0\2\24\1\0\3\24\2\56\2\0\12\56\1\0" +
                    "\1\24\20\0\1\56\1\24\1\0\6\24\3\0\3\24" +
                    "\1\0\4\24\3\0\2\24\1\0\1\24\1\0\2\24" +
                    "\3\0\2\24\3\0\3\24\3\0\14\24\4\0\5\56" +
                    "\3\0\3\56\1\0\4\56\2\0\1\24\6\0\1\56" +
                    "\16\0\12\56\20\0\5\56\10\24\1\0\3\24\1\0" +
                    "\27\24\1\0\20\24\3\0\1\24\7\56\1\0\3\56" +
                    "\1\0\4\56\7\0\2\56\1\0\3\24\5\0\2\24" +
                    "\2\56\2\0\12\56\20\0\1\24\3\56\1\0\10\24" +
                    "\1\0\3\24\1\0\27\24\1\0\12\24\1\0\5\24" +
                    "\2\0\1\56\1\24\7\56\1\0\3\56\1\0\4\56" +
                    "\7\0\2\56\7\0\1\24\1\0\2\24\2\56\2\0" +
                    "\12\56\1\0\2\24\15\0\4\56\1\0\10\24\1\0" +
                    "\3\24\1\0\51\24\2\56\1\24\7\56\1\0\3\56" +
                    "\1\0\4\56\1\24\5\0\3\24\1\56\7\0\3\24" +
                    "\2\56\2\0\12\56\12\0\6\24\2\0\2\56\1\0" +
                    "\22\24\3\0\30\24\1\0\11\24\1\0\1\24\2\0" +
                    "\7\24\3\0\1\56\4\0\6\56\1\0\1\56\1\0" +
                    "\10\56\6\0\12\56\2\0\2\56\15\0\60\24\1\56" +
                    "\1\24\10\56\5\0\7\24\10\56\1\0\12\56\47\0" +
                    "\2\24\1\0\1\24\1\0\5\24\1\0\30\24\1\0" +
                    "\1\24\1\0\12\24\1\56\1\24\12\56\1\24\2\0" +
                    "\5\24\1\0\1\24\1\0\6\56\2\0\12\56\2\0" +
                    "\4\24\40\0\1\24\27\0\2\56\6\0\12\56\13\0" +
                    "\1\56\1\0\1\56\1\0\1\56\4\0\2\56\10\24" +
                    "\1\0\44\24\4\0\24\56\1\0\2\56\5\24\13\56" +
                    "\1\0\44\56\11\0\1\56\71\0\53\24\24\56\1\24" +
                    "\12\56\6\0\6\24\4\56\4\24\3\56\1\24\3\56" +
                    "\2\24\7\56\3\24\4\56\15\24\14\56\1\24\17\56" +
                    "\2\0\46\24\1\0\1\24\5\0\1\24\2\0\53\24" +
                    "\1\0\115\24\1\0\4\24\2\0\7\24\1\0\1\24" +
                    "\1\0\4\24\2\0\51\24\1\0\4\24\2\0\41\24" +
                    "\1\0\4\24\2\0\7\24\1\0\1\24\1\0\4\24" +
                    "\2\0\17\24\1\0\71\24\1\0\4\24\2\0\103\24" +
                    "\2\0\3\56\11\0\11\56\16\0\20\24\20\0\126\24" +
                    "\2\0\6\24\3\0\u016c\24\2\0\21\24\1\1\32\24" +
                    "\5\0\113\24\3\0\13\24\7\0\15\24\1\0\4\24" +
                    "\3\56\13\0\22\24\3\56\13\0\22\24\2\56\14\0" +
                    "\15\24\1\0\3\24\1\0\2\56\14\0\64\24\40\56" +
                    "\3\0\1\24\4\0\1\24\1\56\2\0\12\56\41\0" +
                    "\3\56\2\0\12\56\6\0\131\24\7\0\51\24\1\56" +
                    "\1\24\5\0\106\24\12\0\37\24\1\0\14\56\4\0" +
                    "\14\56\12\0\12\56\36\24\2\0\5\24\13\0\54\24" +
                    "\4\0\32\24\6\0\13\56\45\0\27\24\5\56\4\0" +
                    "\65\24\12\56\1\0\35\56\2\0\13\56\6\0\12\56" +
                    "\15\0\1\24\10\0\16\56\102\0\5\56\57\24\21\56" +
                    "\7\24\4\0\12\56\21\0\11\56\14\0\3\56\36\24" +
                    "\15\56\2\24\12\56\54\24\16\56\14\0\44\24\24\56" +
                    "\10\0\12\56\3\0\3\24\12\56\44\24\2\0\11\24" +
                    "\7\0\53\24\2\0\3\24\20\0\3\56\1\0\25\56" +
                    "\4\24\1\56\6\24\1\56\2\24\3\56\1\24\5\0" +
                    "\300\24\72\56\1\0\5\56\26\24\2\0\6\24\2\0" +
                    "\46\24\2\0\6\24\2\0\10\24\1\0\1\24\1\0" +
                    "\1\24\1\0\1\24\1\0\37\24\2\0\65\24\1\0" +
                    "\7\24\1\0\1\24\3\0\3\24\1\0\7\24\3\0" +
                    "\4\24\2\0\6\24\4\0\15\24\5\0\3\24\1\0" +
                    "\7\24\3\0\13\1\35\0\2\1\5\0\1\1\17\0" +
                    "\2\56\23\0\1\56\12\0\1\1\21\0\1\24\15\0" +
                    "\1\24\20\0\15\24\63\0\15\56\4\0\1\56\3\0" +
                    "\14\56\21\0\1\24\4\0\1\24\2\0\12\24\1\0" +
                    "\1\24\2\0\6\24\6\0\1\24\1\0\1\24\1\0" +
                    "\1\24\1\0\20\24\2\0\4\24\5\0\5\24\4\0" +
                    "\1\24\21\0\51\24\u0177\0\57\24\1\0\57\24\1\0" +
                    "\205\24\6\0\4\24\3\56\2\24\14\0\46\24\1\0" +
                    "\1\24\5\0\1\24\2\0\70\24\7\0\1\24\17\0" +
                    "\1\56\27\24\11\0\7\24\1\0\7\24\1\0\7\24" +
                    "\1\0\7\24\1\0\7\24\1\0\7\24\1\0\7\24" +
                    "\1\0\7\24\1\0\40\56\1\1\4\0\3\24\31\0" +
                    "\11\24\6\56\1\0\5\24\2\0\5\24\4\0\126\24" +
                    "\2\0\2\56\2\0\3\24\1\0\132\24\1\0\4\24" +
                    "\5\0\53\24\1\0\136\24\21\0\33\24\65\0\306\24" +
                    "\112\0\360\24\20\0\215\24\103\0\56\24\2\0\15\24" +
                    "\3\0\20\24\12\56\2\24\24\0\57\24\1\56\4\0" +
                    "\12\56\1\0\37\24\2\56\120\24\2\56\45\0\11\24" +
                    "\2\0\147\24\2\0\65\24\2\0\5\24\60\0\13\24" +
                    "\1\56\3\24\1\56\4\24\1\56\27\24\5\56\30\0" +
                    "\64\24\14\0\2\56\62\24\22\56\12\0\12\56\6\0" +
                    "\22\56\6\24\3\0\1\24\1\0\2\24\13\56\34\24" +
                    "\10\56\2\0\27\24\15\56\14\0\35\24\3\0\4\56" +
                    "\57\24\16\56\16\0\1\24\12\56\6\0\5\24\1\56" +
                    "\12\24\12\56\5\24\1\0\51\24\16\56\11\0\3\24" +
                    "\1\56\10\24\2\56\2\0\12\56\6\0\27\24\3\0" +
                    "\1\24\3\56\62\24\1\56\1\24\3\56\2\24\2\56" +
                    "\5\24\2\56\1\24\1\56\1\24\30\0\3\24\2\0" +
                    "\13\24\5\56\2\0\3\24\2\56\12\0\6\24\2\0" +
                    "\6\24\2\0\6\24\11\0\7\24\1\0\7\24\1\0" +
                    "\53\24\1\0\14\24\10\0\163\24\10\56\1\0\2\56" +
                    "\2\0\12\56\6\0\244\24\14\0\27\24\4\0\61\24" +
                    "\4\0\156\24\2\0\152\24\46\0\7\24\14\0\5\24" +
                    "\5\0\1\24\1\56\12\24\1\0\15\24\1\0\5\24" +
                    "\1\0\1\24\1\0\2\24\1\0\2\24\1\0\154\24" +
                    "\41\0\213\24\6\0\332\24\22\0\100\24\2\0\66\24" +
                    "\50\0\12\24\6\0\20\56\20\0\20\56\3\0\2\56" +
                    "\30\0\3\56\41\0\1\24\1\0\1\24\3\0\1\24" +
                    "\1\0\1\24\1\0\1\24\1\0\1\24\1\0\176\24" +
                    "\23\0\12\56\7\0\32\24\4\0\1\56\1\0\32\24" +
                    "\13\0\70\24\2\56\37\24\3\0\6\24\2\0\6\24" +
                    "\2\0\6\24\2\0\3\24\43\0\14\24\1\0\32\24" +
                    "\1\0\23\24\1\0\2\24\1\0\17\24\2\0\16\24" +
                    "\42\0\173\24\105\0\65\24\210\0\1\56\202\0\35\24" +
                    "\3\0\61\24\17\0\1\56\37\0\40\24\15\0\36\24" +
                    "\5\0\46\24\5\56\5\0\36\24\2\0\44\24\4\0" +
                    "\10\24\1\0\5\24\52\0\236\24\2\0\12\56\6\0" +
                    "\44\24\4\0\44\24\4\0\50\24\10\0\64\24\234\0" +
                    "\67\24\11\0\26\24\12\0\10\24\230\0\6\24\2\0" +
                    "\1\24\1\0\54\24\1\0\2\24\3\0\1\24\2\0" +
                    "\27\24\12\0\27\24\11\0\37\24\101\0\23\24\1\0" +
                    "\2\24\12\0\26\24\12\0\32\24\106\0\70\24\6\0" +
                    "\2\24\100\0\1\24\3\56\1\0\2\56\5\0\4\56" +
                    "\4\24\1\0\3\24\1\0\35\24\2\0\3\56\4\0" +
                    "\1\56\40\0\35\24\3\0\35\24\43\0\10\24\1\0" +
                    "\34\24\2\56\31\0\66\24\12\0\26\24\12\0\23\24" +
                    "\15\0\22\24\156\0\111\24\67\0\63\24\15\0\63\24" +
                    "\15\0\44\24\4\56\10\0\12\56\306\0\35\24\12\0" +
                    "\1\24\10\0\26\24\13\56\217\0\27\24\11\0\3\56" +
                    "\65\24\17\56\37\0\12\56\17\0\4\56\55\24\13\56" +
                    "\25\0\31\24\7\0\12\56\6\0\3\56\44\24\16\56" +
                    "\1\0\12\56\4\0\1\24\2\56\11\0\43\24\1\56" +
                    "\2\0\1\24\11\0\3\56\60\24\16\56\4\24\4\0" +
                    "\4\56\3\0\12\56\1\24\1\0\1\24\43\0\22\24" +
                    "\1\0\31\24\14\56\6\0\1\56\101\0\7\24\1\0" +
                    "\1\24\1\0\4\24\1\0\17\24\1\0\12\24\7\0" +
                    "\57\24\14\56\5\0\12\56\6\0\4\56\1\0\10\24" +
                    "\2\0\2\24\2\0\26\24\1\0\7\24\1\0\2\24" +
                    "\1\0\5\24\1\0\2\56\1\24\7\56\2\0\2\56" +
                    "\2\0\3\56\2\0\1\24\6\0\1\56\5\0\5\24" +
                    "\2\56\2\0\7\56\3\0\5\56\213\0\65\24\22\56" +
                    "\4\24\5\0\12\56\4\0\1\56\1\24\40\0\60\24" +
                    "\24\56\2\24\1\0\1\24\10\0\12\56\246\0\57\24" +
                    "\7\56\2\0\11\56\27\0\4\24\2\56\42\0\60\24" +
                    "\21\56\3\0\1\24\13\0\12\56\46\0\53\24\15\56" +
                    "\1\24\7\0\12\56\66\0\33\24\2\0\17\56\4\0" +
                    "\12\56\306\0\54\24\17\56\145\0\100\24\12\56\25\0" +
                    "\1\24\240\0\10\24\2\0\47\24\7\56\2\0\7\56" +
                    "\1\24\1\0\1\24\1\56\33\0\1\24\12\56\50\24" +
                    "\7\56\1\24\4\56\10\0\1\56\10\0\1\24\13\56" +
                    "\56\24\20\56\3\0\1\24\42\0\71\24\7\0\11\24" +
                    "\1\0\45\24\10\56\1\0\10\56\1\24\17\0\12\56" +
                    "\30\0\36\24\2\0\26\56\1\0\16\56\111\0\7\24" +
                    "\1\0\2\24\1\0\46\24\6\56\3\0\1\56\1\0" +
                    "\2\56\1\0\7\56\1\24\1\56\10\0\12\56\6\0" +
                    "\6\24\1\0\2\24\1\0\40\24\5\56\1\0\2\56" +
                    "\1\0\5\56\1\24\7\0\12\56\u0136\0\23\24\4\56" +
                    "\11\0\232\24\146\0\157\24\21\0\304\24\274\0\57\24" +
                    "\321\0\107\24\271\0\71\24\7\0\37\24\1\0\12\56" +
                    "\146\0\36\24\2\0\5\56\13\0\60\24\7\56\11\0" +
                    "\4\24\14\0\12\56\11\0\25\24\5\0\23\24\260\0" +
                    "\100\24\200\0\113\24\4\0\1\56\1\24\67\56\7\0" +
                    "\4\56\15\24\100\0\2\24\1\0\1\24\34\0\370\24" +
                    "\10\0\363\24\15\0\37\24\61\0\3\24\21\0\4\24" +
                    "\10\0\u018c\24\4\0\153\24\5\0\15\24\3\0\11\24" +
                    "\7\0\12\24\3\0\2\56\306\0\5\56\3\0\6\56" +
                    "\10\0\10\56\2\0\7\56\36\0\4\56\224\0\3\56" +
                    "\273\0\125\24\1\0\107\24\1\0\2\24\2\0\1\24" +
                    "\2\0\2\24\2\0\4\24\1\0\14\24\1\0\1\24" +
                    "\1\0\7\24\1\0\101\24\1\0\4\24\2\0\10\24" +
                    "\1\0\7\24\1\0\34\24\1\0\4\24\1\0\5\24" +
                    "\1\0\1\24\3\0\7\24\1\0\u0154\24\2\0\31\24" +
                    "\1\0\31\24\1\0\37\24\1\0\31\24\1\0\37\24" +
                    "\1\0\31\24\1\0\37\24\1\0\31\24\1\0\37\24" +
                    "\1\0\31\24\1\0\10\24\2\0\151\56\4\0\62\56" +
                    "\10\0\1\56\16\0\1\56\26\0\5\56\1\0\17\56" +
                    "\120\0\7\56\1\0\21\56\2\0\7\56\1\0\2\56" +
                    "\1\0\5\56\325\0\55\24\3\0\7\56\7\24\2\0" +
                    "\12\56\4\0\1\24\u0171\0\54\24\16\56\6\0\305\24" +
                    "\13\0\7\56\51\0\104\24\7\56\1\24\4\0\12\56" +
                    "\246\0\4\24\1\0\33\24\1\0\2\24\1\0\1\24" +
                    "\2\0\1\24\1\0\12\24\1\0\4\24\1\0\1\24" +
                    "\1\0\1\24\6\0\1\24\4\0\1\24\1\0\1\24" +
                    "\1\0\1\24\1\0\3\24\1\0\2\24\1\0\1\24" +
                    "\2\0\1\24\1\0\1\24\1\0\1\24\1\0\1\24" +
                    "\1\0\1\24\1\0\2\24\1\0\1\24\2\0\4\24" +
                    "\1\0\7\24\1\0\4\24\1\0\4\24\1\0\1\24" +
                    "\1\0\12\24\1\0\21\24\5\0\3\24\1\0\5\24" +
                    "\1\0\21\24\104\0\327\24\51\0\65\24\13\0\336\24" +
                    "\2\0\u0182\24\16\0\u0131\24\37\0\36\24\342\0\360\56" +
                    "\20\0";

    private static int[] zzUnpackcmap_blocks() {
        int[] result = new int[29184];
        int offset = 0;
        offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_blocks(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7" +
                    "\1\10\1\11\1\12\2\13\1\14\1\15\1\16\1\17" +
                    "\1\20\1\21\1\22\1\23\1\24\1\25\10\22\1\26" +
                    "\1\27\1\30\1\31\1\0\1\32\1\13\2\22\1\33" +
                    "\1\34\10\22\1\0\2\22\1\35\1\22\1\36\5\22" +
                    "\1\37\1\40\1\41\1\22\1\42\1\22\1\43\1\22" +
                    "\1\44\1\45";

    private static int[] zzUnpackAction() {
        int[] result = new int[72];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\57\0\136\0\215\0\136\0\136\0\136\0\274" +
                    "\0\136\0\353\0\136\0\u011a\0\u0149\0\u0178\0\136\0\136" +
                    "\0\136\0\136\0\136\0\136\0\u01a7\0\136\0\136\0\136" +
                    "\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292\0\u02c1\0\u02f0\0\u031f" +
                    "\0\136\0\136\0\136\0\136\0\u034e\0\u037d\0\136\0\u03ac" +
                    "\0\u03db\0\u01a7\0\u01a7\0\u040a\0\u0439\0\u0468\0\u0497\0\u04c6" +
                    "\0\u04f5\0\u0524\0\u0553\0\u0582\0\u05b1\0\u05e0\0\u01a7\0\u060f" +
                    "\0\u01a7\0\u063e\0\u066d\0\u069c\0\u06cb\0\u06fa\0\136\0\u01a7" +
                    "\0\u01a7\0\u0729\0\u01a7\0\u0758\0\u01a7\0\u0787\0\u01a7\0\u01a7";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[72];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length() - 1;
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpacktrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\3\2\4\1\5\1\6\1\7\1\3\1\10\1\11" +
                    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21" +
                    "\1\22\1\23\1\24\2\25\1\26\1\27\1\30\4\25" +
                    "\1\31\1\32\1\25\1\33\1\34\2\25\1\35\1\25" +
                    "\1\36\1\37\2\25\1\40\1\25\1\41\1\42\60\3" +
                    "\60\0\2\4\75\0\1\43\57\0\1\44\42\0\1\45" +
                    "\4\0\1\46\70\0\1\47\45\0\2\16\7\0\1\47" +
                    "\3\0\1\16\41\0\2\25\6\0\2\25\3\0\23\25" +
                    "\2\0\1\25\14\0\2\25\6\0\2\25\3\0\10\25" +
                    "\1\50\1\25\1\51\10\25\2\0\1\25\14\0\2\25" +
                    "\6\0\2\25\3\0\12\25\1\52\10\25\2\0\1\25" +
                    "\14\0\2\25\6\0\2\25\3\0\5\25\1\53\15\25" +
                    "\2\0\1\25\14\0\2\25\6\0\2\25\3\0\4\25" +
                    "\1\54\16\25\2\0\1\25\14\0\2\25\6\0\2\25" +
                    "\3\0\14\25\1\55\2\25\1\56\3\25\2\0\1\25" +
                    "\14\0\2\25\6\0\2\25\3\0\16\25\1\57\4\25" +
                    "\2\0\1\25\14\0\2\25\6\0\2\25\3\0\4\25" +
                    "\1\60\7\25\1\61\5\25\1\62\2\0\1\25\14\0" +
                    "\2\25\6\0\2\25\3\0\6\25\1\63\14\25\2\0" +
                    "\1\25\6\45\1\64\50\45\2\46\1\0\54\46\14\0" +
                    "\2\25\6\0\2\25\3\0\15\25\1\65\5\25\2\0" +
                    "\1\25\14\0\2\25\6\0\2\25\3\0\17\25\1\66" +
                    "\3\25\2\0\1\25\14\0\2\25\6\0\2\25\3\0" +
                    "\16\25\1\67\4\25\2\0\1\25\14\0\2\25\6\0" +
                    "\2\25\3\0\7\25\1\70\13\25\2\0\1\25\14\0" +
                    "\2\25\6\0\2\25\3\0\2\25\1\71\20\25\2\0" +
                    "\1\25\14\0\2\25\6\0\2\25\3\0\14\25\1\72" +
                    "\6\25\2\0\1\25\14\0\2\25\6\0\2\25\3\0" +
                    "\15\25\1\73\5\25\2\0\1\25\14\0\2\25\6\0" +
                    "\2\25\3\0\1\25\1\74\21\25\2\0\1\25\14\0" +
                    "\2\25\6\0\2\25\3\0\13\25\1\75\7\25\2\0" +
                    "\1\25\14\0\2\25\6\0\2\25\3\0\7\25\1\76" +
                    "\13\25\2\0\1\25\6\45\1\64\4\45\1\77\43\45" +
                    "\14\0\2\25\6\0\2\25\3\0\4\25\1\53\16\25" +
                    "\2\0\1\25\14\0\2\25\6\0\2\25\3\0\11\25" +
                    "\1\100\11\25\2\0\1\25\14\0\2\25\6\0\2\25" +
                    "\3\0\20\25\1\101\2\25\2\0\1\25\14\0\2\25" +
                    "\6\0\2\25\3\0\17\25\1\102\3\25\2\0\1\25" +
                    "\14\0\2\25\6\0\2\25\3\0\16\25\1\103\4\25" +
                    "\2\0\1\25\14\0\2\25\6\0\2\25\3\0\7\25" +
                    "\1\104\13\25\2\0\1\25\14\0\2\25\6\0\2\25" +
                    "\3\0\4\25\1\105\16\25\2\0\1\25\14\0\2\25" +
                    "\6\0\2\25\3\0\10\25\1\65\12\25\2\0\1\25" +
                    "\14\0\2\25\6\0\2\25\3\0\3\25\1\106\17\25" +
                    "\2\0\1\25\14\0\2\25\6\0\2\25\3\0\16\25" +
                    "\1\107\4\25\2\0\1\25\14\0\2\25\6\0\2\25" +
                    "\3\0\16\25\1\110\4\25\2\0\1\25";

    private static int[] zzUnpacktrans() {
        int[] result = new int[1974];
        int offset = 0;
        offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpacktrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String[] ZZ_ERROR_MSG = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\2\0\1\11\1\1\3\11\1\1\1\11\1\1\1\11" +
                    "\3\1\6\11\1\1\3\11\10\1\4\11\1\0\1\1" +
                    "\1\11\14\1\1\0\12\1\1\11\11\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[72];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private CharSequence zzBuffer = "";

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * Number of newlines encountered up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    private int yyline;

    /**
     * Number of characters from the last newline up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    protected int yycolumn;

    /**
     * Number of characters up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    private long yychar;

    /**
     * Whether the scanner is currently at the beginning of a line.
     */
    @SuppressWarnings("unused")
    private boolean zzAtBOL = true;

    /**
     * Whether the user-EOF-code has already been executed.
     */
    @SuppressWarnings("unused")
    private boolean zzEOFDone;


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public _MoonLexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Returns the maximum size of the scanner buffer, which limits the size of tokens.
     */
    private int zzMaxBufferLen() {
        return Integer.MAX_VALUE;
    }

    /**
     * Whether the scanner buffer can grow to accommodate a larger token.
     */
    private boolean zzCanGrow() {
        return true;
    }

    /**
     * Translates raw input code points to DFA table row
     */
    private static int zzCMap(int input) {
        int offset = input & 255;
        return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false}, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position {@code pos} from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return null;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return BAD_CHARACTER;
                    }
                    // fall through
                    case 38:
                        break;
                    case 2: {
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 39:
                        break;
                    case 3: {
                        return DOLLAR;
                    }
                    // fall through
                    case 40:
                        break;
                    case 4: {
                        return PARENTHESIS_L;
                    }
                    // fall through
                    case 41:
                        break;
                    case 5: {
                        return PARENTHESIS_R;
                    }
                    // fall through
                    case 42:
                        break;
                    case 6: {
                        return OP_ADD;
                    }
                    // fall through
                    case 43:
                        break;
                    case 7: {
                        return COMMA;
                    }
                    // fall through
                    case 44:
                        break;
                    case 8: {
                        return HYPHEN;
                    }
                    // fall through
                    case 45:
                        break;
                    case 9: {
                        return DOT;
                    }
                    // fall through
                    case 46:
                        break;
                    case 10: {
                        return SLASH;
                    }
                    // fall through
                    case 47:
                        break;
                    case 11: {
                        return INTEGER;
                    }
                    // fall through
                    case 48:
                        break;
                    case 12: {
                        return COLON;
                    }
                    // fall through
                    case 49:
                        break;
                    case 13: {
                        return SEMICOLON;
                    }
                    // fall through
                    case 50:
                        break;
                    case 14: {
                        return ANGLE_L;
                    }
                    // fall through
                    case 51:
                        break;
                    case 15: {
                        return EQ;
                    }
                    // fall through
                    case 52:
                        break;
                    case 16: {
                        return ANGLE_R;
                    }
                    // fall through
                    case 53:
                        break;
                    case 17: {
                        return AT;
                    }
                    // fall through
                    case 54:
                        break;
                    case 18: {
                        return SYMBOL;
                    }
                    // fall through
                    case 55:
                        break;
                    case 19: {
                        return BRACKET_L;
                    }
                    // fall through
                    case 56:
                        break;
                    case 20: {
                        return BRACKET_R;
                    }
                    // fall through
                    case 57:
                        break;
                    case 21: {
                        return ACCENT;
                    }
                    // fall through
                    case 58:
                        break;
                    case 22: {
                        return BRACE_L;
                    }
                    // fall through
                    case 59:
                        break;
                    case 23: {
                        return BRACE_R;
                    }
                    // fall through
                    case 60:
                        break;
                    case 24: {
                        return OP_ADD_ASSIGN;
                    }
                    // fall through
                    case 61:
                        break;
                    case 25: {
                        return TO;
                    }
                    // fall through
                    case 62:
                        break;
                    case 26: {
                        return COMMENT_LINE;
                    }
                    // fall through
                    case 63:
                        break;
                    case 27: {
                        return KW_FN;
                    }
                    // fall through
                    case 64:
                        break;
                    case 28: {
                        return KW_WHILE;
                    }
                    // fall through
                    case 65:
                        break;
                    case 29: {
                        return KW_LET;
                    }
                    // fall through
                    case 66:
                        break;
                    case 30: {
                        return KW_PUBLIC;
                    }
                    // fall through
                    case 67:
                        break;
                    case 31: {
                        return COMMENT_BLOCK;
                    }
                    // fall through
                    case 68:
                        break;
                    case 32: {
                        return KW_ENUM;
                    }
                    // fall through
                    case 69:
                        break;
                    case 33: {
                        return KW_PRIVATE;
                    }
                    // fall through
                    case 70:
                        break;
                    case 34: {
                        return KW_TEST;
                    }
                    // fall through
                    case 71:
                        break;
                    case 35: {
                        return KW_TYPE;
                    }
                    // fall through
                    case 72:
                        break;
                    case 36: {
                        return KW_TRAIT;
                    }
                    // fall through
                    case 73:
                        break;
                    case 37: {
                        return KW_STRUCT;
                    }
                    // fall through
                    case 74:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
