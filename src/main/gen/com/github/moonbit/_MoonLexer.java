// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Moon.flex

package com.github.moonbit;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.moonbit.psi.MoonTypes.*;


public class _MoonLexer implements FlexLexer {

  /**
   * This character denotes the end of file
   */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int DoubleStringLiteral = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
          0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
          "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700" +
                  "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00" +
                  "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500" +
                  "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00" +
                  "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\2\u1f00\1\u2200\1\u2300" +
                  "\2\u1f00\31\u0100\1\u2400\121\u0100\1\u2500\4\u0100\1\u2600\1\u0100" +
                  "\1\u2700\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\53\u0100\1\u2d00" +
                  "\41\u1f00\1\u0100\1\u2e00\1\u2f00\1\u3000\1\u3100\1\u3200\1\u3300" +
                  "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100\1\u3a00" +
                  "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u1f00\1\u4100" +
                  "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900" +
                  "\1\u4a00\1\u4b00\1\u4c00\1\u1f00\1\u4d00\1\u4e00\1\u4f00\1\u1f00" +
                  "\3\u0100\1\u5000\1\u5100\1\u5200\12\u1f00\4\u0100\1\u5300\17\u1f00" +
                  "\2\u0100\1\u5400\41\u1f00\2\u0100\1\u5500\1\u5600\2\u1f00\1\u5700" +
                  "\1\u5800\27\u0100\1\u5900\2\u0100\1\u5a00\45\u1f00\1\u0100\1\u5b00" +
                  "\1\u5c00\11\u1f00\1\u5d00\24\u1f00\1\u5e00\1\u5f00\1\u1f00\1\u6000" +
                  "\1\u6100\1\u6200\1\u6300\2\u1f00\1\u6400\5\u1f00\1\u6500\1\u6600" +
                  "\1\u6700\5\u1f00\1\u6800\1\u6900\4\u1f00\1\u6a00\21\u1f00\246\u0100" +
                  "\1\u6b00\20\u0100\1\u6c00\1\u6d00\25\u0100\1\u6e00\34\u0100\1\u6f00" +
                  "\14\u1f00\2\u0100\1\u7000\u0b06\u1f00\1\u7100\u02fe\u1f00";

  private static int[] zzUnpackcmap_top() {
    int[] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
          "\11\0\1\1\1\2\2\1\1\2\22\0\1\1\1\3" +
                  "\1\4\1\0\1\5\1\6\1\7\1\0\1\10\1\11" +
                  "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\11\21" +
                  "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\13\31" +
                  "\1\32\16\31\1\33\1\0\1\34\1\35\1\36\1\0" +
                  "\1\37\1\40\1\41\1\31\1\42\1\43\1\31\1\44" +
                  "\1\45\1\31\1\46\1\47\1\50\1\51\1\52\1\53" +
                  "\1\31\1\54\1\55\1\56\1\57\1\60\1\61\1\31" +
                  "\1\62\1\31\1\63\1\64\1\65\1\66\6\0\1\1" +
                  "\32\0\1\1\11\0\1\31\12\0\1\31\1\0\1\67" +
                  "\2\0\1\31\5\0\27\31\1\0\37\31\1\0\u01ca\31" +
                  "\4\0\14\31\16\0\5\31\7\0\1\31\1\0\1\31" +
                  "\21\0\160\67\5\31\1\0\2\31\3\0\3\31\1\0" +
                  "\1\31\6\0\1\31\1\67\3\31\1\0\1\31\1\0" +
                  "\24\31\1\0\123\31\1\0\213\31\1\0\5\67\2\0" +
                  "\246\31\1\0\46\31\2\0\1\31\6\0\51\31\10\0" +
                  "\55\67\1\0\1\67\1\0\2\67\1\0\2\67\1\0" +
                  "\1\67\10\0\33\31\4\0\4\31\35\0\13\67\5\0" +
                  "\53\31\37\67\4\0\2\31\1\67\143\31\1\0\1\31" +
                  "\7\67\2\0\6\67\2\31\2\67\1\0\4\67\2\31" +
                  "\12\67\3\31\2\0\1\31\20\0\1\31\1\67\36\31" +
                  "\33\67\2\0\131\31\13\67\1\31\16\0\12\67\41\31" +
                  "\11\67\2\31\4\0\1\31\2\0\1\67\2\0\26\31" +
                  "\4\67\1\31\11\67\1\31\3\67\1\31\5\67\22\0" +
                  "\31\31\3\67\4\0\13\31\65\0\25\31\1\0\10\31" +
                  "\25\0\17\67\1\0\41\67\66\31\3\67\1\31\22\67" +
                  "\1\31\7\67\12\31\2\67\2\0\12\67\1\0\20\31" +
                  "\3\67\1\0\10\31\2\0\2\31\2\0\26\31\1\0" +
                  "\7\31\1\0\1\31\3\0\4\31\2\0\1\67\1\31" +
                  "\7\67\2\0\2\67\2\0\3\67\1\31\10\0\1\67" +
                  "\4\0\2\31\1\0\3\31\2\67\2\0\12\67\2\31" +
                  "\12\0\1\31\1\0\1\67\2\0\3\67\1\0\6\31" +
                  "\4\0\2\31\2\0\26\31\1\0\7\31\1\0\2\31" +
                  "\1\0\2\31\1\0\2\31\2\0\1\67\1\0\5\67" +
                  "\4\0\2\67\2\0\3\67\3\0\1\67\7\0\4\31" +
                  "\1\0\1\31\7\0\14\67\3\31\1\67\13\0\3\67" +
                  "\1\0\11\31\1\0\3\31\1\0\26\31\1\0\7\31" +
                  "\1\0\2\31\1\0\5\31\2\0\1\67\1\31\10\67" +
                  "\1\0\3\67\1\0\3\67\2\0\1\31\17\0\2\31" +
                  "\2\67\2\0\12\67\11\0\1\31\6\67\1\0\3\67" +
                  "\1\0\10\31\2\0\2\31\2\0\26\31\1\0\7\31" +
                  "\1\0\2\31\1\0\5\31\2\0\1\67\1\31\7\67" +
                  "\2\0\2\67\2\0\3\67\10\0\2\67\4\0\2\31" +
                  "\1\0\3\31\2\67\2\0\12\67\1\0\1\31\20\0" +
                  "\1\67\1\31\1\0\6\31\3\0\3\31\1\0\4\31" +
                  "\3\0\2\31\1\0\1\31\1\0\2\31\3\0\2\31" +
                  "\3\0\3\31\3\0\14\31\4\0\5\67\3\0\3\67" +
                  "\1\0\4\67\2\0\1\31\6\0\1\67\16\0\12\67" +
                  "\20\0\5\67\10\31\1\0\3\31\1\0\27\31\1\0" +
                  "\20\31\3\0\1\31\7\67\1\0\3\67\1\0\4\67" +
                  "\7\0\2\67\1\0\3\31\5\0\2\31\2\67\2\0" +
                  "\12\67\20\0\1\31\3\67\1\0\10\31\1\0\3\31" +
                  "\1\0\27\31\1\0\12\31\1\0\5\31\2\0\1\67" +
                  "\1\31\7\67\1\0\3\67\1\0\4\67\7\0\2\67" +
                  "\7\0\1\31\1\0\2\31\2\67\2\0\12\67\1\0" +
                  "\2\31\15\0\4\67\1\0\10\31\1\0\3\31\1\0" +
                  "\51\31\2\67\1\31\7\67\1\0\3\67\1\0\4\67" +
                  "\1\31\5\0\3\31\1\67\7\0\3\31\2\67\2\0" +
                  "\12\67\12\0\6\31\2\0\2\67\1\0\22\31\3\0" +
                  "\30\31\1\0\11\31\1\0\1\31\2\0\7\31\3\0" +
                  "\1\67\4\0\6\67\1\0\1\67\1\0\10\67\6\0" +
                  "\12\67\2\0\2\67\15\0\60\31\1\67\1\31\10\67" +
                  "\5\0\7\31\10\67\1\0\12\67\47\0\2\31\1\0" +
                  "\1\31\1\0\5\31\1\0\30\31\1\0\1\31\1\0" +
                  "\12\31\1\67\1\31\12\67\1\31\2\0\5\31\1\0" +
                  "\1\31\1\0\6\67\2\0\12\67\2\0\4\31\40\0" +
                  "\1\31\27\0\2\67\6\0\12\67\13\0\1\67\1\0" +
                  "\1\67\1\0\1\67\4\0\2\67\10\31\1\0\44\31" +
                  "\4\0\24\67\1\0\2\67\5\31\13\67\1\0\44\67" +
                  "\11\0\1\67\71\0\53\31\24\67\1\31\12\67\6\0" +
                  "\6\31\4\67\4\31\3\67\1\31\3\67\2\31\7\67" +
                  "\3\31\4\67\15\31\14\67\1\31\17\67\2\0\46\31" +
                  "\1\0\1\31\5\0\1\31\2\0\53\31\1\0\115\31" +
                  "\1\0\4\31\2\0\7\31\1\0\1\31\1\0\4\31" +
                  "\2\0\51\31\1\0\4\31\2\0\41\31\1\0\4\31" +
                  "\2\0\7\31\1\0\1\31\1\0\4\31\2\0\17\31" +
                  "\1\0\71\31\1\0\4\31\2\0\103\31\2\0\3\67" +
                  "\11\0\11\67\16\0\20\31\20\0\126\31\2\0\6\31" +
                  "\3\0\u016c\31\2\0\21\31\1\1\32\31\5\0\113\31" +
                  "\3\0\13\31\7\0\15\31\1\0\4\31\3\67\13\0" +
                  "\22\31\3\67\13\0\22\31\2\67\14\0\15\31\1\0" +
                  "\3\31\1\0\2\67\14\0\64\31\40\67\3\0\1\31" +
                  "\4\0\1\31\1\67\2\0\12\67\41\0\3\67\2\0" +
                  "\12\67\6\0\131\31\7\0\51\31\1\67\1\31\5\0" +
                  "\106\31\12\0\37\31\1\0\14\67\4\0\14\67\12\0" +
                  "\12\67\36\31\2\0\5\31\13\0\54\31\4\0\32\31" +
                  "\6\0\13\67\45\0\27\31\5\67\4\0\65\31\12\67" +
                  "\1\0\35\67\2\0\13\67\6\0\12\67\15\0\1\31" +
                  "\10\0\16\67\102\0\5\67\57\31\21\67\7\31\4\0" +
                  "\12\67\21\0\11\67\14\0\3\67\36\31\15\67\2\31" +
                  "\12\67\54\31\16\67\14\0\44\31\24\67\10\0\12\67" +
                  "\3\0\3\31\12\67\44\31\2\0\11\31\7\0\53\31" +
                  "\2\0\3\31\20\0\3\67\1\0\25\67\4\31\1\67" +
                  "\6\31\1\67\2\31\3\67\1\31\5\0\300\31\72\67" +
                  "\1\0\5\67\26\31\2\0\6\31\2\0\46\31\2\0" +
                  "\6\31\2\0\10\31\1\0\1\31\1\0\1\31\1\0" +
                  "\1\31\1\0\37\31\2\0\65\31\1\0\7\31\1\0" +
                  "\1\31\3\0\3\31\1\0\7\31\3\0\4\31\2\0" +
                  "\6\31\4\0\15\31\5\0\3\31\1\0\7\31\3\0" +
                  "\13\1\35\0\2\1\5\0\1\1\17\0\2\67\23\0" +
                  "\1\67\12\0\1\1\21\0\1\31\15\0\1\31\20\0" +
                  "\15\31\63\0\15\67\4\0\1\67\3\0\14\67\21\0" +
                  "\1\31\4\0\1\31\2\0\12\31\1\0\1\31\2\0" +
                  "\6\31\6\0\1\31\1\0\1\31\1\0\1\31\1\0" +
                  "\20\31\2\0\4\31\5\0\5\31\4\0\1\31\21\0" +
                  "\51\31\u0177\0\57\31\1\0\57\31\1\0\205\31\6\0" +
                  "\4\31\3\67\2\31\14\0\46\31\1\0\1\31\5\0" +
                  "\1\31\2\0\70\31\7\0\1\31\17\0\1\67\27\31" +
                  "\11\0\7\31\1\0\7\31\1\0\7\31\1\0\7\31" +
                  "\1\0\7\31\1\0\7\31\1\0\7\31\1\0\7\31" +
                  "\1\0\40\67\1\1\4\0\3\31\31\0\11\31\6\67" +
                  "\1\0\5\31\2\0\5\31\4\0\126\31\2\0\2\67" +
                  "\2\0\3\31\1\0\132\31\1\0\4\31\5\0\53\31" +
                  "\1\0\136\31\21\0\33\31\65\0\306\31\112\0\360\31" +
                  "\20\0\215\31\103\0\56\31\2\0\15\31\3\0\20\31" +
                  "\12\67\2\31\24\0\57\31\1\67\4\0\12\67\1\0" +
                  "\37\31\2\67\120\31\2\67\45\0\11\31\2\0\147\31" +
                  "\2\0\65\31\2\0\5\31\60\0\13\31\1\67\3\31" +
                  "\1\67\4\31\1\67\27\31\5\67\30\0\64\31\14\0" +
                  "\2\67\62\31\22\67\12\0\12\67\6\0\22\67\6\31" +
                  "\3\0\1\31\1\0\2\31\13\67\34\31\10\67\2\0" +
                  "\27\31\15\67\14\0\35\31\3\0\4\67\57\31\16\67" +
                  "\16\0\1\31\12\67\6\0\5\31\1\67\12\31\12\67" +
                  "\5\31\1\0\51\31\16\67\11\0\3\31\1\67\10\31" +
                  "\2\67\2\0\12\67\6\0\27\31\3\0\1\31\3\67" +
                  "\62\31\1\67\1\31\3\67\2\31\2\67\5\31\2\67" +
                  "\1\31\1\67\1\31\30\0\3\31\2\0\13\31\5\67" +
                  "\2\0\3\31\2\67\12\0\6\31\2\0\6\31\2\0" +
                  "\6\31\11\0\7\31\1\0\7\31\1\0\53\31\1\0" +
                  "\14\31\10\0\163\31\10\67\1\0\2\67\2\0\12\67" +
                  "\6\0\244\31\14\0\27\31\4\0\61\31\4\0\156\31" +
                  "\2\0\152\31\46\0\7\31\14\0\5\31\5\0\1\31" +
                  "\1\67\12\31\1\0\15\31\1\0\5\31\1\0\1\31" +
                  "\1\0\2\31\1\0\2\31\1\0\154\31\41\0\213\31" +
                  "\6\0\332\31\22\0\100\31\2\0\66\31\50\0\12\31" +
                  "\6\0\20\67\20\0\20\67\3\0\2\67\30\0\3\67" +
                  "\41\0\1\31\1\0\1\31\3\0\1\31\1\0\1\31" +
                  "\1\0\1\31\1\0\1\31\1\0\176\31\23\0\12\67" +
                  "\7\0\32\31\4\0\1\67\1\0\32\31\13\0\70\31" +
                  "\2\67\37\31\3\0\6\31\2\0\6\31\2\0\6\31" +
                  "\2\0\3\31\43\0\14\31\1\0\32\31\1\0\23\31" +
                  "\1\0\2\31\1\0\17\31\2\0\16\31\42\0\173\31" +
                  "\105\0\65\31\210\0\1\67\202\0\35\31\3\0\61\31" +
                  "\17\0\1\67\37\0\40\31\15\0\36\31\5\0\46\31" +
                  "\5\67\5\0\36\31\2\0\44\31\4\0\10\31\1\0" +
                  "\5\31\52\0\236\31\2\0\12\67\6\0\44\31\4\0" +
                  "\44\31\4\0\50\31\10\0\64\31\234\0\67\31\11\0" +
                  "\26\31\12\0\10\31\230\0\6\31\2\0\1\31\1\0" +
                  "\54\31\1\0\2\31\3\0\1\31\2\0\27\31\12\0" +
                  "\27\31\11\0\37\31\101\0\23\31\1\0\2\31\12\0" +
                  "\26\31\12\0\32\31\106\0\70\31\6\0\2\31\100\0" +
                  "\1\31\3\67\1\0\2\67\5\0\4\67\4\31\1\0" +
                  "\3\31\1\0\35\31\2\0\3\67\4\0\1\67\40\0" +
                  "\35\31\3\0\35\31\43\0\10\31\1\0\34\31\2\67" +
                  "\31\0\66\31\12\0\26\31\12\0\23\31\15\0\22\31" +
                  "\156\0\111\31\67\0\63\31\15\0\63\31\15\0\44\31" +
                  "\4\67\10\0\12\67\306\0\35\31\12\0\1\31\10\0" +
                  "\26\31\13\67\217\0\27\31\11\0\3\67\65\31\17\67" +
                  "\37\0\12\67\17\0\4\67\55\31\13\67\25\0\31\31" +
                  "\7\0\12\67\6\0\3\67\44\31\16\67\1\0\12\67" +
                  "\4\0\1\31\2\67\11\0\43\31\1\67\2\0\1\31" +
                  "\11\0\3\67\60\31\16\67\4\31\4\0\4\67\3\0" +
                  "\12\67\1\31\1\0\1\31\43\0\22\31\1\0\31\31" +
                  "\14\67\6\0\1\67\101\0\7\31\1\0\1\31\1\0" +
                  "\4\31\1\0\17\31\1\0\12\31\7\0\57\31\14\67" +
                  "\5\0\12\67\6\0\4\67\1\0\10\31\2\0\2\31" +
                  "\2\0\26\31\1\0\7\31\1\0\2\31\1\0\5\31" +
                  "\1\0\2\67\1\31\7\67\2\0\2\67\2\0\3\67" +
                  "\2\0\1\31\6\0\1\67\5\0\5\31\2\67\2\0" +
                  "\7\67\3\0\5\67\213\0\65\31\22\67\4\31\5\0" +
                  "\12\67\4\0\1\67\1\31\40\0\60\31\24\67\2\31" +
                  "\1\0\1\31\10\0\12\67\246\0\57\31\7\67\2\0" +
                  "\11\67\27\0\4\31\2\67\42\0\60\31\21\67\3\0" +
                  "\1\31\13\0\12\67\46\0\53\31\15\67\1\31\7\0" +
                  "\12\67\66\0\33\31\2\0\17\67\4\0\12\67\306\0" +
                  "\54\31\17\67\145\0\100\31\12\67\25\0\1\31\240\0" +
                  "\10\31\2\0\47\31\7\67\2\0\7\67\1\31\1\0" +
                  "\1\31\1\67\33\0\1\31\12\67\50\31\7\67\1\31" +
                  "\4\67\10\0\1\67\10\0\1\31\13\67\56\31\20\67" +
                  "\3\0\1\31\42\0\71\31\7\0\11\31\1\0\45\31" +
                  "\10\67\1\0\10\67\1\31\17\0\12\67\30\0\36\31" +
                  "\2\0\26\67\1\0\16\67\111\0\7\31\1\0\2\31" +
                  "\1\0\46\31\6\67\3\0\1\67\1\0\2\67\1\0" +
                  "\7\67\1\31\1\67\10\0\12\67\6\0\6\31\1\0" +
                  "\2\31\1\0\40\31\5\67\1\0\2\67\1\0\5\67" +
                  "\1\31\7\0\12\67\u0136\0\23\31\4\67\11\0\232\31" +
                  "\146\0\157\31\21\0\304\31\274\0\57\31\321\0\107\31" +
                  "\271\0\71\31\7\0\37\31\1\0\12\67\146\0\36\31" +
                  "\2\0\5\67\13\0\60\31\7\67\11\0\4\31\14\0" +
                  "\12\67\11\0\25\31\5\0\23\31\260\0\100\31\200\0" +
                  "\113\31\4\0\1\67\1\31\67\67\7\0\4\67\15\31" +
                  "\100\0\2\31\1\0\1\31\34\0\370\31\10\0\363\31" +
                  "\15\0\37\31\61\0\3\31\21\0\4\31\10\0\u018c\31" +
                  "\4\0\153\31\5\0\15\31\3\0\11\31\7\0\12\31" +
                  "\3\0\2\67\306\0\5\67\3\0\6\67\10\0\10\67" +
                  "\2\0\7\67\36\0\4\67\224\0\3\67\273\0\125\31" +
                  "\1\0\107\31\1\0\2\31\2\0\1\31\2\0\2\31" +
                  "\2\0\4\31\1\0\14\31\1\0\1\31\1\0\7\31" +
                  "\1\0\101\31\1\0\4\31\2\0\10\31\1\0\7\31" +
                  "\1\0\34\31\1\0\4\31\1\0\5\31\1\0\1\31" +
                  "\3\0\7\31\1\0\u0154\31\2\0\31\31\1\0\31\31" +
                  "\1\0\37\31\1\0\31\31\1\0\37\31\1\0\31\31" +
                  "\1\0\37\31\1\0\31\31\1\0\37\31\1\0\31\31" +
                  "\1\0\10\31\2\0\151\67\4\0\62\67\10\0\1\67" +
                  "\16\0\1\67\26\0\5\67\1\0\17\67\120\0\7\67" +
                  "\1\0\21\67\2\0\7\67\1\0\2\67\1\0\5\67" +
                  "\325\0\55\31\3\0\7\67\7\31\2\0\12\67\4\0" +
                  "\1\31\u0171\0\54\31\16\67\6\0\305\31\13\0\7\67" +
                  "\51\0\104\31\7\67\1\31\4\0\12\67\246\0\4\31" +
                  "\1\0\33\31\1\0\2\31\1\0\1\31\2\0\1\31" +
                  "\1\0\12\31\1\0\4\31\1\0\1\31\1\0\1\31" +
                  "\6\0\1\31\4\0\1\31\1\0\1\31\1\0\1\31" +
                  "\1\0\3\31\1\0\2\31\1\0\1\31\2\0\1\31" +
                  "\1\0\1\31\1\0\1\31\1\0\1\31\1\0\1\31" +
                  "\1\0\2\31\1\0\1\31\2\0\4\31\1\0\7\31" +
                  "\1\0\4\31\1\0\4\31\1\0\1\31\1\0\12\31" +
                  "\1\0\21\31\5\0\3\31\1\0\5\31\1\0\21\31" +
                  "\104\0\327\31\51\0\65\31\13\0\336\31\2\0\u0182\31" +
                  "\16\0\u0131\31\37\0\36\31\342\0\360\67\20\0";

  private static int[] zzUnpackcmap_blocks() {
    int[] result = new int[29184];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int[] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
          "\2\0\1\1\1\2\1\1\1\3\1\4\1\5\1\1" +
                  "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15" +
                  "\2\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25" +
                  "\1\26\1\27\1\30\1\31\14\26\1\32\1\1\1\33" +
                  "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\0" +
                  "\1\43\1\44\1\16\1\45\1\46\1\47\1\50\4\26" +
                  "\1\51\1\26\1\52\12\26\1\53\1\54\1\0\4\26" +
                  "\1\55\1\56\1\57\1\26\1\60\6\26\1\61\2\26" +
                  "\1\62\1\63\1\64\2\26\1\65\1\26\1\66\1\26" +
                  "\1\67\3\26\1\70\1\71\1\26\1\72\1\73\1\26" +
                  "\1\74";

  private static int[] zzUnpackAction() {
    int[] result = new int[118];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
          "\0\0\0\70\0\160\0\250\0\340\0\160\0\160\0\160" +
                  "\0\u0118\0\160\0\160\0\160\0\u0150\0\160\0\u0188\0\160" +
                  "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\160\0\u02a0\0\u02d8\0\u0310" +
                  "\0\160\0\160\0\u0348\0\160\0\160\0\160\0\u0380\0\u03b8" +
                  "\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0\0\u0508\0\u0540\0\u0578" +
                  "\0\u05b0\0\u05e8\0\160\0\u0620\0\160\0\160\0\160\0\160" +
                  "\0\160\0\160\0\160\0\160\0\u0658\0\u0690\0\160\0\160" +
                  "\0\160\0\160\0\160\0\160\0\u06c8\0\u0700\0\u0738\0\u0770" +
                  "\0\u0348\0\u07a8\0\u0348\0\u07e0\0\u0818\0\u0850\0\u0888\0\u08c0" +
                  "\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09d8\0\160\0\160\0\u0a10" +
                  "\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0348\0\u0348\0\u0348\0\u0b28" +
                  "\0\u0348\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\160" +
                  "\0\u0cb0\0\u0ce8\0\u0348\0\u0348\0\u0348\0\u0d20\0\u0d58\0\u0348" +
                  "\0\u0d90\0\u0348\0\u0dc8\0\u0348\0\u0e00\0\u0e38\0\u0e70\0\u0348" +
                  "\0\u0348\0\u0ea8\0\u0348\0\u0348\0\u0ee0\0\u0348";

  private static int[] zzUnpackRowMap() {
    int[] result = new int[118];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int[] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
          "\1\3\2\4\1\5\1\6\1\7\1\10\1\11\1\12" +
                  "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22" +
                  "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32" +
                  "\2\33\1\34\1\35\1\36\2\33\1\37\1\40\1\41" +
                  "\1\42\1\33\1\43\1\33\1\44\1\45\2\33\1\46" +
                  "\1\47\1\50\1\51\2\33\1\52\1\33\1\53\1\54" +
                  "\1\55\1\56\1\3\4\57\1\60\63\57\71\0\2\4" +
                  "\112\0\1\61\51\0\1\62\105\0\1\63\70\0\1\64" +
                  "\53\0\1\65\4\0\1\66\5\0\1\67\74\0\1\70" +
                  "\55\0\2\23\10\0\1\70\3\0\1\23\53\0\1\71" +
                  "\72\0\1\72\67\0\1\73\67\0\1\74\62\0\2\33" +
                  "\7\0\2\33\3\0\25\33\4\0\1\33\20\0\2\33" +
                  "\7\0\2\33\3\0\16\33\1\75\6\33\4\0\1\33" +
                  "\20\0\2\33\7\0\2\33\3\0\14\33\1\76\10\33" +
                  "\4\0\1\33\20\0\2\33\7\0\2\33\3\0\11\33" +
                  "\1\77\1\33\1\100\11\33\4\0\1\33\20\0\2\33" +
                  "\7\0\2\33\3\0\13\33\1\101\1\102\10\33\4\0" +
                  "\1\33\20\0\2\33\7\0\2\33\3\0\5\33\1\103" +
                  "\17\33\4\0\1\33\20\0\2\33\7\0\2\33\3\0" +
                  "\4\33\1\104\20\33\4\0\1\33\20\0\2\33\7\0" +
                  "\2\33\3\0\21\33\1\105\3\33\4\0\1\33\20\0" +
                  "\2\33\7\0\2\33\3\0\16\33\1\106\2\33\1\107" +
                  "\3\33\4\0\1\33\20\0\2\33\7\0\2\33\3\0" +
                  "\4\33\1\110\20\33\4\0\1\33\20\0\2\33\7\0" +
                  "\2\33\3\0\20\33\1\111\4\33\4\0\1\33\20\0" +
                  "\2\33\7\0\2\33\3\0\4\33\1\112\11\33\1\113" +
                  "\5\33\1\114\4\0\1\33\20\0\2\33\7\0\2\33" +
                  "\3\0\6\33\1\115\16\33\4\0\1\33\26\0\1\116" +
                  "\35\0\1\117\3\0\12\65\1\120\55\65\2\66\1\0" +
                  "\65\66\20\0\2\33\7\0\2\33\3\0\4\33\1\121" +
                  "\20\33\4\0\1\33\20\0\2\33\7\0\2\33\3\0" +
                  "\13\33\1\122\11\33\4\0\1\33\20\0\2\33\7\0" +
                  "\2\33\3\0\17\33\1\123\5\33\4\0\1\33\20\0" +
                  "\2\33\7\0\2\33\3\0\21\33\1\124\3\33\4\0" +
                  "\1\33\20\0\2\33\7\0\2\33\3\0\16\33\1\125" +
                  "\6\33\4\0\1\33\20\0\2\33\7\0\2\33\3\0" +
                  "\20\33\1\126\4\33\4\0\1\33\20\0\2\33\7\0" +
                  "\2\33\3\0\20\33\1\127\4\33\4\0\1\33\20\0" +
                  "\2\33\7\0\2\33\3\0\7\33\1\130\15\33\4\0" +
                  "\1\33\20\0\2\33\7\0\2\33\3\0\2\33\1\131" +
                  "\22\33\4\0\1\33\20\0\2\33\7\0\2\33\3\0" +
                  "\20\33\1\132\4\33\4\0\1\33\20\0\2\33\7\0" +
                  "\2\33\3\0\16\33\1\133\6\33\4\0\1\33\20\0" +
                  "\2\33\7\0\2\33\3\0\17\33\1\134\5\33\4\0" +
                  "\1\33\20\0\2\33\7\0\2\33\3\0\1\33\1\135" +
                  "\23\33\4\0\1\33\20\0\2\33\7\0\2\33\3\0" +
                  "\15\33\1\136\7\33\4\0\1\33\20\0\2\33\7\0" +
                  "\2\33\3\0\7\33\1\137\15\33\4\0\1\33\12\65" +
                  "\1\120\4\65\1\140\50\65\20\0\2\33\7\0\2\33" +
                  "\3\0\1\33\1\141\23\33\4\0\1\33\20\0\2\33" +
                  "\7\0\2\33\3\0\20\33\1\142\4\33\4\0\1\33" +
                  "\20\0\2\33\7\0\2\33\3\0\4\33\1\143\20\33" +
                  "\4\0\1\33\20\0\2\33\7\0\2\33\3\0\12\33" +
                  "\1\144\12\33\4\0\1\33\20\0\2\33\7\0\2\33" +
                  "\3\0\22\33\1\145\2\33\4\0\1\33\20\0\2\33" +
                  "\7\0\2\33\3\0\21\33\1\146\3\33\4\0\1\33" +
                  "\20\0\2\33\7\0\2\33\3\0\21\33\1\147\3\33" +
                  "\4\0\1\33\20\0\2\33\7\0\2\33\3\0\20\33" +
                  "\1\150\4\33\4\0\1\33\20\0\2\33\7\0\2\33" +
                  "\3\0\7\33\1\151\15\33\4\0\1\33\20\0\2\33" +
                  "\7\0\2\33\3\0\4\33\1\152\20\33\4\0\1\33" +
                  "\20\0\2\33\7\0\2\33\3\0\11\33\1\153\13\33" +
                  "\4\0\1\33\20\0\2\33\7\0\2\33\3\0\10\33" +
                  "\1\154\14\33\4\0\1\33\20\0\2\33\7\0\2\33" +
                  "\3\0\7\33\1\155\15\33\4\0\1\33\20\0\2\33" +
                  "\7\0\2\33\3\0\16\33\1\156\6\33\4\0\1\33" +
                  "\20\0\2\33\7\0\2\33\3\0\3\33\1\157\21\33" +
                  "\4\0\1\33\20\0\2\33\7\0\2\33\3\0\20\33" +
                  "\1\160\4\33\4\0\1\33\20\0\2\33\7\0\2\33" +
                  "\3\0\4\33\1\161\20\33\4\0\1\33\20\0\2\33" +
                  "\7\0\2\33\3\0\13\33\1\162\11\33\4\0\1\33" +
                  "\20\0\2\33\7\0\2\33\3\0\13\33\1\163\11\33" +
                  "\4\0\1\33\20\0\2\33\7\0\2\33\3\0\20\33" +
                  "\1\164\4\33\4\0\1\33\20\0\2\33\7\0\2\33" +
                  "\3\0\21\33\1\165\3\33\4\0\1\33\20\0\2\33" +
                  "\7\0\2\33\3\0\4\33\1\166\20\33\4\0\1\33";

  private static int[] zzUnpacktrans() {
    int[] result = new int[3864];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
          "Unknown internal scanner error",
          "Error: could not match input",
          "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
          "\2\0\1\11\2\1\3\11\1\1\3\11\1\1\1\11" +
                  "\1\1\1\11\4\1\1\11\3\1\2\11\1\1\3\11" +
                  "\14\1\1\11\1\1\10\11\1\0\1\1\6\11\21\1" +
                  "\2\11\1\0\17\1\1\11\26\1";

  private static int[] zzUnpackAttribute() {
    int[] result = new int[118];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
   the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
   from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _MoonLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos -zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number) {
    if (number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return the next token
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ((zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          } else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          } else {
            // store back cached positions
            zzCurrentPos = zzCurrentPosL;
            zzMarkedPos = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL = zzCurrentPos;
            zzMarkedPosL = zzMarkedPos;
            zzBufferL = zzBuffer;
            zzEndReadL = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            } else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ((zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ((zzAttributes & 8) == 8) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      } else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: {
            return BAD_CHARACTER;
          }
          // fall through
          case 61:
            break;
          case 2: {
            return WHITE_SPACE;
          }
          // fall through
          case 62:
            break;
          case 3: {
            yybegin(DoubleStringLiteral);
            return DOUBLE_QUOTE_L;
          }
          // fall through
          case 63:
            break;
          case 4: {
            return DOLLAR;
          }
          // fall through
          case 64:
            break;
          case 5: {
            return OP_MOD;
          }
          // fall through
          case 65:
            break;
          case 6: {
            return PARENTHESIS_L;
            }
          // fall through
          case 66:
            break;
          case 7: {
            return PARENTHESIS_R;
            }
          // fall through
          case 67:
            break;
          case 8: {
            return OP_MUL;
            }
          // fall through
          case 68:
            break;
          case 9: {
            return OP_ADD;
            }
          // fall through
          case 69:
            break;
          case 10: {
            return COMMA;
          }
          // fall through
          case 70:
            break;
          case 11: {
            return OP_SUB;
            }
          // fall through
          case 71:
            break;
          case 12: { return DOT;
            }
          // fall through
          case 72:
            break;
          case 13: {
            return OP_DIV;
            }
          // fall through
          case 73:
            break;
          case 14: {
            return INTEGER;
            }
          // fall through
          case 74:
            break;
          case 15: {
            return COLON;
            }
          // fall through
          case 75:
            break;
          case 16: {
            return SEMICOLON;
            }
          // fall through
          case 76:
            break;
          case 17: {
            return OP_LT;
            }
          // fall through
          case 77:
            break;
          case 18: {
            return OP_ASSIGN;
            }
          // fall through
          case 78:
            break;
          case 19: {
            return OP_GT;
            }
          // fall through
          case 79:
            break;
          case 20: {
            return OP_THROW;
            }
          // fall through
          case 80:
            break;
          case 21: { return AT;
            }
          // fall through
          case 81:
            break;
          case 22: {
            return SYMBOL;
            }
          // fall through
          case 82:
            break;
          case 23: {
            return BRACKET_L;
            }
          // fall through
          case 83:
            break;
          case 24: {
            return BRACKET_R;
            }
          // fall through
          case 84:
            break;
          case 25: {
            return ACCENT;
            }
          // fall through
          case 85:
            break;
          case 26: {
            return BRACE_L;
            }
          // fall through
          case 86:
            break;
          case 27: {
            return BRACE_R;
            }
          // fall through
          case 87:
            break;
          case 28: {
            return OP_REF;
            }
          // fall through
          case 88:
            break;
          case 29: {
            return STRING_TEXT;
            }
          // fall through
          case 89:
            break;
          case 30: {
            yybegin(YYINITIAL);
            return DOUBLE_QUOTE_R;
            }
          // fall through
          case 90:
            break;
          case 31: {
            return OP_NE;
            }
          // fall through
          case 91:
            break;
          case 32: {
            return OP_AND;
            }
          // fall through
          case 92:
            break;
          case 33: {
            return OP_ADD_ASSIGN;
            }
          // fall through
          case 93:
            break;
          case 34: {
            return OP_TO;
            }
          // fall through
          case 94:
            break;
          case 35: {
            return COMMENT_LINE;
            }
          // fall through
          case 95:
            break;
          case 36: {
            return OP_DIV_ASSIGN;
            }
          // fall through
          case 96:
            break;
          case 37: {
            return NAME_JOIN;
            }
          // fall through
          case 97:
            break;
          case 38: {
            return OP_LEQ;
            }
          // fall through
          case 98:
            break;
          case 39: {
            return OP_EQ;
            }
          // fall through
          case 99:
            break;
          case 40: {
            return OP_GEQ;
            }
          // fall through
          case 100:
            break;
          case 41: {
            return KW_FN;
            }
          // fall through
          case 101:
            break;
          case 42: {
            return KW_IF;
            }
          // fall through
          case 102:
            break;
          case 43: {
            return OP_THEN;
            }
          // fall through
          case 103:
            break;
          case 44: {
            return OP_OR;
            }
          // fall through
          case 104:
            break;
          case 45: {
            return KW_FOR;
            }
          // fall through
          case 105:
            break;
          case 46: {
            return KW_LET;
            }
          // fall through
          case 106:
            break;
          case 47: {
            return KW_MUTABLE;
            }
          // fall through
          case 107:
            break;
          case 48: {
            return KW_PUBLIC;
            }
          // fall through
          case 108:
            break;
          case 49: {
            return COMMENT_BLOCK;
            }
          // fall through
          case 109:
            break;
          case 50: {
            return KW_ELSE;
            }
          // fall through
          case 110:
            break;
          case 51: {
            return KW_ENUM;
          }
          // fall through
          case 111:
            break;
          case 52: {
            return KW_PRIVATE;
            }
          // fall through
          case 112:
            break;
          case 53: {
            return KW_TEST;
            }
          // fall through
          case 113:
            break;
          case 54: {
            return KW_TYPE;
          }
          // fall through
          case 114:
            break;
          case 55: {
            return KW_BREAK;
          }
          // fall through
          case 115:
            break;
          case 56: {
            return KW_TRAIT;
          }
          // fall through
          case 116:
            break;
          case 57: {
            return KW_WHILE;
          }
          // fall through
          case 117:
            break;
          case 58: {
            return KW_RETURN;
          }
          // fall through
          case 118:
            break;
          case 59: {
            return KW_STRUCT;
          }
          // fall through
          case 119:
            break;
          case 60: {
            return KW_CONTINUE;
          }
          // fall through
          case 120: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
