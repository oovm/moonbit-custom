// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Moon.flex

package com.github.moonbit;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.moonbit.psi.MoonTypes.*;


public class _MoonLexer implements FlexLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int StringInterpolation = 2;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1
    };

    /**
     * Top-level table for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();

    private static final String ZZ_CMAP_TOP_PACKED_0 =
            "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700" +
                    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00" +
                    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500" +
                    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00" +
                    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\2\u1f00\1\u2200\1\u2300" +
                    "\2\u1f00\31\u0100\1\u2400\121\u0100\1\u2500\4\u0100\1\u2600\1\u0100" +
                    "\1\u2700\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\53\u0100\1\u2d00" +
                    "\41\u1f00\1\u0100\1\u2e00\1\u2f00\1\u3000\1\u3100\1\u3200\1\u3300" +
                    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100\1\u3a00" +
                    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u1f00\1\u4100" +
                    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900" +
                    "\1\u4a00\1\u4b00\1\u4c00\1\u1f00\1\u4d00\1\u4e00\1\u4f00\1\u1f00" +
                    "\3\u0100\1\u5000\1\u5100\1\u5200\12\u1f00\4\u0100\1\u5300\17\u1f00" +
                    "\2\u0100\1\u5400\41\u1f00\2\u0100\1\u5500\1\u5600\2\u1f00\1\u5700" +
                    "\1\u5800\27\u0100\1\u5900\2\u0100\1\u5a00\45\u1f00\1\u0100\1\u5b00" +
                    "\1\u5c00\11\u1f00\1\u5d00\24\u1f00\1\u5e00\1\u5f00\1\u1f00\1\u6000" +
                    "\1\u6100\1\u6200\1\u6300\2\u1f00\1\u6400\5\u1f00\1\u6500\1\u6600" +
                    "\1\u6700\5\u1f00\1\u6800\1\u6900\4\u1f00\1\u6a00\21\u1f00\246\u0100" +
                    "\1\u6b00\20\u0100\1\u6c00\1\u6d00\25\u0100\1\u6e00\34\u0100\1\u6f00" +
                    "\14\u1f00\2\u0100\1\u7000\u0b06\u1f00\1\u7100\u02fe\u1f00";

    private static int[] zzUnpackcmap_top() {
        int[] result = new int[4352];
        int offset = 0;
        offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_top(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Second-level tables for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

    private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
            "\11\0\1\1\1\2\2\1\1\2\22\0\1\1\3\0" +
                    "\1\3\1\4\2\0\1\5\1\6\1\7\1\10\1\11" +
                    "\1\12\1\13\1\14\1\15\11\16\1\17\1\20\1\21" +
                    "\1\22\1\23\1\24\1\25\13\26\1\27\16\26\1\30" +
                    "\1\0\1\31\1\32\1\33\1\0\1\34\1\35\1\36" +
                    "\1\26\1\37\1\40\1\26\1\41\1\42\2\26\1\43" +
                    "\1\44\1\45\1\26\1\46\1\26\1\47\1\50\1\51" +
                    "\1\52\1\53\1\54\1\26\1\55\1\26\1\56\1\0" +
                    "\1\57\1\60\6\0\1\1\32\0\1\1\11\0\1\26" +
                    "\12\0\1\26\1\0\1\61\2\0\1\26\5\0\27\26" +
                    "\1\0\37\26\1\0\u01ca\26\4\0\14\26\16\0\5\26" +
                    "\7\0\1\26\1\0\1\26\21\0\160\61\5\26\1\0" +
                    "\2\26\3\0\3\26\1\0\1\26\6\0\1\26\1\61" +
                    "\3\26\1\0\1\26\1\0\24\26\1\0\123\26\1\0" +
                    "\213\26\1\0\5\61\2\0\246\26\1\0\46\26\2\0" +
                    "\1\26\6\0\51\26\10\0\55\61\1\0\1\61\1\0" +
                    "\2\61\1\0\2\61\1\0\1\61\10\0\33\26\4\0" +
                    "\4\26\35\0\13\61\5\0\53\26\37\61\4\0\2\26" +
                    "\1\61\143\26\1\0\1\26\7\61\2\0\6\61\2\26" +
                    "\2\61\1\0\4\61\2\26\12\61\3\26\2\0\1\26" +
                    "\20\0\1\26\1\61\36\26\33\61\2\0\131\26\13\61" +
                    "\1\26\16\0\12\61\41\26\11\61\2\26\4\0\1\26" +
                    "\2\0\1\61\2\0\26\26\4\61\1\26\11\61\1\26" +
                    "\3\61\1\26\5\61\22\0\31\26\3\61\4\0\13\26" +
                    "\65\0\25\26\1\0\10\26\25\0\17\61\1\0\41\61" +
                    "\66\26\3\61\1\26\22\61\1\26\7\61\12\26\2\61" +
                    "\2\0\12\61\1\0\20\26\3\61\1\0\10\26\2\0" +
                    "\2\26\2\0\26\26\1\0\7\26\1\0\1\26\3\0" +
                    "\4\26\2\0\1\61\1\26\7\61\2\0\2\61\2\0" +
                    "\3\61\1\26\10\0\1\61\4\0\2\26\1\0\3\26" +
                    "\2\61\2\0\12\61\2\26\12\0\1\26\1\0\1\61" +
                    "\2\0\3\61\1\0\6\26\4\0\2\26\2\0\26\26" +
                    "\1\0\7\26\1\0\2\26\1\0\2\26\1\0\2\26" +
                    "\2\0\1\61\1\0\5\61\4\0\2\61\2\0\3\61" +
                    "\3\0\1\61\7\0\4\26\1\0\1\26\7\0\14\61" +
                    "\3\26\1\61\13\0\3\61\1\0\11\26\1\0\3\26" +
                    "\1\0\26\26\1\0\7\26\1\0\2\26\1\0\5\26" +
                    "\2\0\1\61\1\26\10\61\1\0\3\61\1\0\3\61" +
                    "\2\0\1\26\17\0\2\26\2\61\2\0\12\61\11\0" +
                    "\1\26\6\61\1\0\3\61\1\0\10\26\2\0\2\26" +
                    "\2\0\26\26\1\0\7\26\1\0\2\26\1\0\5\26" +
                    "\2\0\1\61\1\26\7\61\2\0\2\61\2\0\3\61" +
                    "\10\0\2\61\4\0\2\26\1\0\3\26\2\61\2\0" +
                    "\12\61\1\0\1\26\20\0\1\61\1\26\1\0\6\26" +
                    "\3\0\3\26\1\0\4\26\3\0\2\26\1\0\1\26" +
                    "\1\0\2\26\3\0\2\26\3\0\3\26\3\0\14\26" +
                    "\4\0\5\61\3\0\3\61\1\0\4\61\2\0\1\26" +
                    "\6\0\1\61\16\0\12\61\20\0\5\61\10\26\1\0" +
                    "\3\26\1\0\27\26\1\0\20\26\3\0\1\26\7\61" +
                    "\1\0\3\61\1\0\4\61\7\0\2\61\1\0\3\26" +
                    "\5\0\2\26\2\61\2\0\12\61\20\0\1\26\3\61" +
                    "\1\0\10\26\1\0\3\26\1\0\27\26\1\0\12\26" +
                    "\1\0\5\26\2\0\1\61\1\26\7\61\1\0\3\61" +
                    "\1\0\4\61\7\0\2\61\7\0\1\26\1\0\2\26" +
                    "\2\61\2\0\12\61\1\0\2\26\15\0\4\61\1\0" +
                    "\10\26\1\0\3\26\1\0\51\26\2\61\1\26\7\61" +
                    "\1\0\3\61\1\0\4\61\1\26\5\0\3\26\1\61" +
                    "\7\0\3\26\2\61\2\0\12\61\12\0\6\26\2\0" +
                    "\2\61\1\0\22\26\3\0\30\26\1\0\11\26\1\0" +
                    "\1\26\2\0\7\26\3\0\1\61\4\0\6\61\1\0" +
                    "\1\61\1\0\10\61\6\0\12\61\2\0\2\61\15\0" +
                    "\60\26\1\61\1\26\10\61\5\0\7\26\10\61\1\0" +
                    "\12\61\47\0\2\26\1\0\1\26\1\0\5\26\1\0" +
                    "\30\26\1\0\1\26\1\0\12\26\1\61\1\26\12\61" +
                    "\1\26\2\0\5\26\1\0\1\26\1\0\6\61\2\0" +
                    "\12\61\2\0\4\26\40\0\1\26\27\0\2\61\6\0" +
                    "\12\61\13\0\1\61\1\0\1\61\1\0\1\61\4\0" +
                    "\2\61\10\26\1\0\44\26\4\0\24\61\1\0\2\61" +
                    "\5\26\13\61\1\0\44\61\11\0\1\61\71\0\53\26" +
                    "\24\61\1\26\12\61\6\0\6\26\4\61\4\26\3\61" +
                    "\1\26\3\61\2\26\7\61\3\26\4\61\15\26\14\61" +
                    "\1\26\17\61\2\0\46\26\1\0\1\26\5\0\1\26" +
                    "\2\0\53\26\1\0\115\26\1\0\4\26\2\0\7\26" +
                    "\1\0\1\26\1\0\4\26\2\0\51\26\1\0\4\26" +
                    "\2\0\41\26\1\0\4\26\2\0\7\26\1\0\1\26" +
                    "\1\0\4\26\2\0\17\26\1\0\71\26\1\0\4\26" +
                    "\2\0\103\26\2\0\3\61\11\0\11\61\16\0\20\26" +
                    "\20\0\126\26\2\0\6\26\3\0\u016c\26\2\0\21\26" +
                    "\1\1\32\26\5\0\113\26\3\0\13\26\7\0\15\26" +
                    "\1\0\4\26\3\61\13\0\22\26\3\61\13\0\22\26" +
                    "\2\61\14\0\15\26\1\0\3\26\1\0\2\61\14\0" +
                    "\64\26\40\61\3\0\1\26\4\0\1\26\1\61\2\0" +
                    "\12\61\41\0\3\61\2\0\12\61\6\0\131\26\7\0" +
                    "\51\26\1\61\1\26\5\0\106\26\12\0\37\26\1\0" +
                    "\14\61\4\0\14\61\12\0\12\61\36\26\2\0\5\26" +
                    "\13\0\54\26\4\0\32\26\6\0\13\61\45\0\27\26" +
                    "\5\61\4\0\65\26\12\61\1\0\35\61\2\0\13\61" +
                    "\6\0\12\61\15\0\1\26\10\0\16\61\102\0\5\61" +
                    "\57\26\21\61\7\26\4\0\12\61\21\0\11\61\14\0" +
                    "\3\61\36\26\15\61\2\26\12\61\54\26\16\61\14\0" +
                    "\44\26\24\61\10\0\12\61\3\0\3\26\12\61\44\26" +
                    "\2\0\11\26\7\0\53\26\2\0\3\26\20\0\3\61" +
                    "\1\0\25\61\4\26\1\61\6\26\1\61\2\26\3\61" +
                    "\1\26\5\0\300\26\72\61\1\0\5\61\26\26\2\0" +
                    "\6\26\2\0\46\26\2\0\6\26\2\0\10\26\1\0" +
                    "\1\26\1\0\1\26\1\0\1\26\1\0\37\26\2\0" +
                    "\65\26\1\0\7\26\1\0\1\26\3\0\3\26\1\0" +
                    "\7\26\3\0\4\26\2\0\6\26\4\0\15\26\5\0" +
                    "\3\26\1\0\7\26\3\0\13\1\35\0\2\1\5\0" +
                    "\1\1\17\0\2\61\23\0\1\61\12\0\1\1\21\0" +
                    "\1\26\15\0\1\26\20\0\15\26\63\0\15\61\4\0" +
                    "\1\61\3\0\14\61\21\0\1\26\4\0\1\26\2\0" +
                    "\12\26\1\0\1\26\2\0\6\26\6\0\1\26\1\0" +
                    "\1\26\1\0\1\26\1\0\20\26\2\0\4\26\5\0" +
                    "\5\26\4\0\1\26\21\0\51\26\u0177\0\57\26\1\0" +
                    "\57\26\1\0\205\26\6\0\4\26\3\61\2\26\14\0" +
                    "\46\26\1\0\1\26\5\0\1\26\2\0\70\26\7\0" +
                    "\1\26\17\0\1\61\27\26\11\0\7\26\1\0\7\26" +
                    "\1\0\7\26\1\0\7\26\1\0\7\26\1\0\7\26" +
                    "\1\0\7\26\1\0\7\26\1\0\40\61\1\1\4\0" +
                    "\3\26\31\0\11\26\6\61\1\0\5\26\2\0\5\26" +
                    "\4\0\126\26\2\0\2\61\2\0\3\26\1\0\132\26" +
                    "\1\0\4\26\5\0\53\26\1\0\136\26\21\0\33\26" +
                    "\65\0\306\26\112\0\360\26\20\0\215\26\103\0\56\26" +
                    "\2\0\15\26\3\0\20\26\12\61\2\26\24\0\57\26" +
                    "\1\61\4\0\12\61\1\0\37\26\2\61\120\26\2\61" +
                    "\45\0\11\26\2\0\147\26\2\0\65\26\2\0\5\26" +
                    "\60\0\13\26\1\61\3\26\1\61\4\26\1\61\27\26" +
                    "\5\61\30\0\64\26\14\0\2\61\62\26\22\61\12\0" +
                    "\12\61\6\0\22\61\6\26\3\0\1\26\1\0\2\26" +
                    "\13\61\34\26\10\61\2\0\27\26\15\61\14\0\35\26" +
                    "\3\0\4\61\57\26\16\61\16\0\1\26\12\61\6\0" +
                    "\5\26\1\61\12\26\12\61\5\26\1\0\51\26\16\61" +
                    "\11\0\3\26\1\61\10\26\2\61\2\0\12\61\6\0" +
                    "\27\26\3\0\1\26\3\61\62\26\1\61\1\26\3\61" +
                    "\2\26\2\61\5\26\2\61\1\26\1\61\1\26\30\0" +
                    "\3\26\2\0\13\26\5\61\2\0\3\26\2\61\12\0" +
                    "\6\26\2\0\6\26\2\0\6\26\11\0\7\26\1\0" +
                    "\7\26\1\0\53\26\1\0\14\26\10\0\163\26\10\61" +
                    "\1\0\2\61\2\0\12\61\6\0\244\26\14\0\27\26" +
                    "\4\0\61\26\4\0\156\26\2\0\152\26\46\0\7\26" +
                    "\14\0\5\26\5\0\1\26\1\61\12\26\1\0\15\26" +
                    "\1\0\5\26\1\0\1\26\1\0\2\26\1\0\2\26" +
                    "\1\0\154\26\41\0\213\26\6\0\332\26\22\0\100\26" +
                    "\2\0\66\26\50\0\12\26\6\0\20\61\20\0\20\61" +
                    "\3\0\2\61\30\0\3\61\41\0\1\26\1\0\1\26" +
                    "\3\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26" +
                    "\1\0\176\26\23\0\12\61\7\0\32\26\4\0\1\61" +
                    "\1\0\32\26\13\0\70\26\2\61\37\26\3\0\6\26" +
                    "\2\0\6\26\2\0\6\26\2\0\3\26\43\0\14\26" +
                    "\1\0\32\26\1\0\23\26\1\0\2\26\1\0\17\26" +
                    "\2\0\16\26\42\0\173\26\105\0\65\26\210\0\1\61" +
                    "\202\0\35\26\3\0\61\26\17\0\1\61\37\0\40\26" +
                    "\15\0\36\26\5\0\46\26\5\61\5\0\36\26\2\0" +
                    "\44\26\4\0\10\26\1\0\5\26\52\0\236\26\2\0" +
                    "\12\61\6\0\44\26\4\0\44\26\4\0\50\26\10\0" +
                    "\64\26\234\0\67\26\11\0\26\26\12\0\10\26\230\0" +
                    "\6\26\2\0\1\26\1\0\54\26\1\0\2\26\3\0" +
                    "\1\26\2\0\27\26\12\0\27\26\11\0\37\26\101\0" +
                    "\23\26\1\0\2\26\12\0\26\26\12\0\32\26\106\0" +
                    "\70\26\6\0\2\26\100\0\1\26\3\61\1\0\2\61" +
                    "\5\0\4\61\4\26\1\0\3\26\1\0\35\26\2\0" +
                    "\3\61\4\0\1\61\40\0\35\26\3\0\35\26\43\0" +
                    "\10\26\1\0\34\26\2\61\31\0\66\26\12\0\26\26" +
                    "\12\0\23\26\15\0\22\26\156\0\111\26\67\0\63\26" +
                    "\15\0\63\26\15\0\44\26\4\61\10\0\12\61\306\0" +
                    "\35\26\12\0\1\26\10\0\26\26\13\61\217\0\27\26" +
                    "\11\0\3\61\65\26\17\61\37\0\12\61\17\0\4\61" +
                    "\55\26\13\61\25\0\31\26\7\0\12\61\6\0\3\61" +
                    "\44\26\16\61\1\0\12\61\4\0\1\26\2\61\11\0" +
                    "\43\26\1\61\2\0\1\26\11\0\3\61\60\26\16\61" +
                    "\4\26\4\0\4\61\3\0\12\61\1\26\1\0\1\26" +
                    "\43\0\22\26\1\0\31\26\14\61\6\0\1\61\101\0" +
                    "\7\26\1\0\1\26\1\0\4\26\1\0\17\26\1\0" +
                    "\12\26\7\0\57\26\14\61\5\0\12\61\6\0\4\61" +
                    "\1\0\10\26\2\0\2\26\2\0\26\26\1\0\7\26" +
                    "\1\0\2\26\1\0\5\26\1\0\2\61\1\26\7\61" +
                    "\2\0\2\61\2\0\3\61\2\0\1\26\6\0\1\61" +
                    "\5\0\5\26\2\61\2\0\7\61\3\0\5\61\213\0" +
                    "\65\26\22\61\4\26\5\0\12\61\4\0\1\61\1\26" +
                    "\40\0\60\26\24\61\2\26\1\0\1\26\10\0\12\61" +
                    "\246\0\57\26\7\61\2\0\11\61\27\0\4\26\2\61" +
                    "\42\0\60\26\21\61\3\0\1\26\13\0\12\61\46\0" +
                    "\53\26\15\61\1\26\7\0\12\61\66\0\33\26\2\0" +
                    "\17\61\4\0\12\61\306\0\54\26\17\61\145\0\100\26" +
                    "\12\61\25\0\1\26\240\0\10\26\2\0\47\26\7\61" +
                    "\2\0\7\61\1\26\1\0\1\26\1\61\33\0\1\26" +
                    "\12\61\50\26\7\61\1\26\4\61\10\0\1\61\10\0" +
                    "\1\26\13\61\56\26\20\61\3\0\1\26\42\0\71\26" +
                    "\7\0\11\26\1\0\45\26\10\61\1\0\10\61\1\26" +
                    "\17\0\12\61\30\0\36\26\2\0\26\61\1\0\16\61" +
                    "\111\0\7\26\1\0\2\26\1\0\46\26\6\61\3\0" +
                    "\1\61\1\0\2\61\1\0\7\61\1\26\1\61\10\0" +
                    "\12\61\6\0\6\26\1\0\2\26\1\0\40\26\5\61" +
                    "\1\0\2\61\1\0\5\61\1\26\7\0\12\61\u0136\0" +
                    "\23\26\4\61\11\0\232\26\146\0\157\26\21\0\304\26" +
                    "\274\0\57\26\321\0\107\26\271\0\71\26\7\0\37\26" +
                    "\1\0\12\61\146\0\36\26\2\0\5\61\13\0\60\26" +
                    "\7\61\11\0\4\26\14\0\12\61\11\0\25\26\5\0" +
                    "\23\26\260\0\100\26\200\0\113\26\4\0\1\61\1\26" +
                    "\67\61\7\0\4\61\15\26\100\0\2\26\1\0\1\26" +
                    "\34\0\370\26\10\0\363\26\15\0\37\26\61\0\3\26" +
                    "\21\0\4\26\10\0\u018c\26\4\0\153\26\5\0\15\26" +
                    "\3\0\11\26\7\0\12\26\3\0\2\61\306\0\5\61" +
                    "\3\0\6\61\10\0\10\61\2\0\7\61\36\0\4\61" +
                    "\224\0\3\61\273\0\125\26\1\0\107\26\1\0\2\26" +
                    "\2\0\1\26\2\0\2\26\2\0\4\26\1\0\14\26" +
                    "\1\0\1\26\1\0\7\26\1\0\101\26\1\0\4\26" +
                    "\2\0\10\26\1\0\7\26\1\0\34\26\1\0\4\26" +
                    "\1\0\5\26\1\0\1\26\3\0\7\26\1\0\u0154\26" +
                    "\2\0\31\26\1\0\31\26\1\0\37\26\1\0\31\26" +
                    "\1\0\37\26\1\0\31\26\1\0\37\26\1\0\31\26" +
                    "\1\0\37\26\1\0\31\26\1\0\10\26\2\0\151\61" +
                    "\4\0\62\61\10\0\1\61\16\0\1\61\26\0\5\61" +
                    "\1\0\17\61\120\0\7\61\1\0\21\61\2\0\7\61" +
                    "\1\0\2\61\1\0\5\61\325\0\55\26\3\0\7\61" +
                    "\7\26\2\0\12\61\4\0\1\26\u0171\0\54\26\16\61" +
                    "\6\0\305\26\13\0\7\61\51\0\104\26\7\61\1\26" +
                    "\4\0\12\61\246\0\4\26\1\0\33\26\1\0\2\26" +
                    "\1\0\1\26\2\0\1\26\1\0\12\26\1\0\4\26" +
                    "\1\0\1\26\1\0\1\26\6\0\1\26\4\0\1\26" +
                    "\1\0\1\26\1\0\1\26\1\0\3\26\1\0\2\26" +
                    "\1\0\1\26\2\0\1\26\1\0\1\26\1\0\1\26" +
                    "\1\0\1\26\1\0\1\26\1\0\2\26\1\0\1\26" +
                    "\2\0\4\26\1\0\7\26\1\0\4\26\1\0\4\26" +
                    "\1\0\1\26\1\0\12\26\1\0\21\26\5\0\3\26" +
                    "\1\0\5\26\1\0\21\26\104\0\327\26\51\0\65\26" +
                    "\13\0\336\26\2\0\u0182\26\16\0\u0131\26\37\0\36\26" +
                    "\342\0\360\61\20\0";

    private static int[] zzUnpackcmap_blocks() {
        int[] result = new int[29184];
        int offset = 0;
        offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_blocks(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7" +
                    "\1\10\1\11\1\12\1\13\1\14\2\15\1\16\1\17" +
                    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27" +
                    "\1\30\11\25\1\31\1\32\1\33\1\34\1\35\1\0" +
                    "\1\36\1\15\1\37\1\40\2\25\1\41\1\42\11\25" +
                    "\1\0\2\25\1\43\1\44\1\25\1\45\5\25\1\46" +
                    "\1\47\1\50\1\25\1\51\1\25\1\52\1\25\1\53" +
                    "\1\54";

    private static int[] zzUnpackAction() {
        int[] result = new int[81];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\62\0\144\0\226\0\144\0\144\0\144\0\144" +
                    "\0\144\0\310\0\144\0\372\0\144\0\u012c\0\u015e\0\u0190" +
                    "\0\144\0\144\0\u01c2\0\144\0\u01f4\0\144\0\144\0\u0226" +
                    "\0\144\0\144\0\144\0\u0258\0\u028a\0\u02bc\0\u02ee\0\u0320" +
                    "\0\u0352\0\u0384\0\u03b6\0\u03e8\0\144\0\144\0\144\0\144" +
                    "\0\144\0\u041a\0\u044c\0\144\0\144\0\144\0\u047e\0\u04b0" +
                    "\0\u0226\0\u0226\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc" +
                    "\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u0226\0\u0226" +
                    "\0\u073a\0\u0226\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\144" +
                    "\0\u0226\0\u0226\0\u0866\0\u0226\0\u0898\0\u0226\0\u08ca\0\u0226" +
                    "\0\u0226";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[81];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length() - 1;
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpacktrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\3\2\4\1\5\1\6\1\7\1\10\1\11\1\12" +
                    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22" +
                    "\1\23\1\24\1\25\1\26\1\27\2\30\1\31\1\32" +
                    "\1\33\4\30\1\34\1\35\1\30\1\36\1\37\1\40" +
                    "\1\30\1\41\1\30\1\42\1\43\2\30\1\44\1\30" +
                    "\1\45\1\46\1\47\63\3\63\0\2\4\101\0\1\50" +
                    "\62\0\1\51\45\0\1\52\4\0\1\53\74\0\1\54" +
                    "\47\0\2\20\10\0\1\54\3\0\1\20\50\0\1\55" +
                    "\61\0\1\56\54\0\2\30\7\0\2\30\3\0\23\30" +
                    "\3\0\1\30\15\0\2\30\7\0\2\30\3\0\10\30" +
                    "\1\57\1\30\1\60\10\30\3\0\1\30\15\0\2\30" +
                    "\7\0\2\30\3\0\12\30\1\61\10\30\3\0\1\30" +
                    "\15\0\2\30\7\0\2\30\3\0\5\30\1\62\15\30" +
                    "\3\0\1\30\15\0\2\30\7\0\2\30\3\0\4\30" +
                    "\1\63\16\30\3\0\1\30\15\0\2\30\7\0\2\30" +
                    "\3\0\17\30\1\64\3\30\3\0\1\30\15\0\2\30" +
                    "\7\0\2\30\3\0\14\30\1\65\2\30\1\66\3\30" +
                    "\3\0\1\30\15\0\2\30\7\0\2\30\3\0\16\30" +
                    "\1\67\4\30\3\0\1\30\15\0\2\30\7\0\2\30" +
                    "\3\0\4\30\1\70\7\30\1\71\5\30\1\72\3\0" +
                    "\1\30\15\0\2\30\7\0\2\30\3\0\6\30\1\73" +
                    "\14\30\3\0\1\30\7\52\1\74\52\52\2\53\1\0" +
                    "\57\53\15\0\2\30\7\0\2\30\3\0\15\30\1\75" +
                    "\5\30\3\0\1\30\15\0\2\30\7\0\2\30\3\0" +
                    "\17\30\1\76\3\30\3\0\1\30\15\0\2\30\7\0" +
                    "\2\30\3\0\16\30\1\77\4\30\3\0\1\30\15\0" +
                    "\2\30\7\0\2\30\3\0\16\30\1\100\4\30\3\0" +
                    "\1\30\15\0\2\30\7\0\2\30\3\0\7\30\1\101" +
                    "\13\30\3\0\1\30\15\0\2\30\7\0\2\30\3\0" +
                    "\2\30\1\102\20\30\3\0\1\30\15\0\2\30\7\0" +
                    "\2\30\3\0\14\30\1\103\6\30\3\0\1\30\15\0" +
                    "\2\30\7\0\2\30\3\0\15\30\1\104\5\30\3\0" +
                    "\1\30\15\0\2\30\7\0\2\30\3\0\1\30\1\105" +
                    "\21\30\3\0\1\30\15\0\2\30\7\0\2\30\3\0" +
                    "\13\30\1\106\7\30\3\0\1\30\15\0\2\30\7\0" +
                    "\2\30\3\0\7\30\1\107\13\30\3\0\1\30\7\52" +
                    "\1\74\4\52\1\110\45\52\15\0\2\30\7\0\2\30" +
                    "\3\0\4\30\1\62\16\30\3\0\1\30\15\0\2\30" +
                    "\7\0\2\30\3\0\11\30\1\111\11\30\3\0\1\30" +
                    "\15\0\2\30\7\0\2\30\3\0\20\30\1\112\2\30" +
                    "\3\0\1\30\15\0\2\30\7\0\2\30\3\0\17\30" +
                    "\1\113\3\30\3\0\1\30\15\0\2\30\7\0\2\30" +
                    "\3\0\16\30\1\114\4\30\3\0\1\30\15\0\2\30" +
                    "\7\0\2\30\3\0\7\30\1\115\13\30\3\0\1\30" +
                    "\15\0\2\30\7\0\2\30\3\0\4\30\1\116\16\30" +
                    "\3\0\1\30\15\0\2\30\7\0\2\30\3\0\10\30" +
                    "\1\75\12\30\3\0\1\30\15\0\2\30\7\0\2\30" +
                    "\3\0\3\30\1\117\17\30\3\0\1\30\15\0\2\30" +
                    "\7\0\2\30\3\0\16\30\1\120\4\30\3\0\1\30" +
                    "\15\0\2\30\7\0\2\30\3\0\16\30\1\121\4\30" +
                    "\3\0\1\30";

    private static int[] zzUnpacktrans() {
        int[] result = new int[2300];
        int offset = 0;
        offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpacktrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String[] ZZ_ERROR_MSG = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\2\0\1\11\1\1\5\11\1\1\1\11\1\1\1\11" +
                    "\3\1\2\11\1\1\1\11\1\1\2\11\1\1\3\11" +
                    "\11\1\5\11\1\0\1\1\3\11\15\1\1\0\13\1" +
                    "\1\11\11\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[81];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private CharSequence zzBuffer = "";

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * Number of newlines encountered up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    private int yyline;

    /**
     * Number of characters from the last newline up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    protected int yycolumn;

    /**
     * Number of characters up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    private long yychar;

    /**
     * Whether the scanner is currently at the beginning of a line.
     */
    @SuppressWarnings("unused")
    private boolean zzAtBOL = true;

    /**
     * Whether the user-EOF-code has already been executed.
     */
    @SuppressWarnings("unused")
    private boolean zzEOFDone;


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public _MoonLexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Returns the maximum size of the scanner buffer, which limits the size of tokens.
     */
    private int zzMaxBufferLen() {
        return Integer.MAX_VALUE;
    }

    /**
     * Whether the scanner buffer can grow to accommodate a larger token.
     */
    private boolean zzCanGrow() {
        return true;
    }

    /**
     * Translates raw input code points to DFA table row
     */
    private static int zzCMap(int input) {
        int offset = input & 255;
        return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false}, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position {@code pos} from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return null;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return BAD_CHARACTER;
                    }
                    // fall through
                    case 45:
                        break;
                    case 2: {
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 46:
                        break;
                    case 3: {
                        return DOLLAR;
                    }
                    // fall through
                    case 47:
                        break;
                    case 4: {
                        return OP_MOD;
                    }
                    // fall through
                    case 48:
                        break;
                    case 5: {
                        return PARENTHESIS_L;
                    }
                    // fall through
                    case 49:
                        break;
                    case 6: {
                        return PARENTHESIS_R;
                    }
                    // fall through
                    case 50:
                        break;
                    case 7: {
                        return OP_MUL;
                    }
                    // fall through
                    case 51:
                        break;
                    case 8: {
                        return OP_ADD;
                    }
                    // fall through
                    case 52:
                        break;
                    case 9: {
                        return COMMA;
                    }
                    // fall through
                    case 53:
                        break;
                    case 10: {
                        return HYPHEN;
                    }
                    // fall through
                    case 54:
                        break;
                    case 11: {
                        return DOT;
                    }
                    // fall through
                    case 55:
                        break;
                    case 12: {
                        return OP_DIV;
                    }
                    // fall through
                    case 56:
                        break;
                    case 13: {
                        return INTEGER;
                    }
                    // fall through
                    case 57:
                        break;
                    case 14: {
                        return COLON;
                    }
                    // fall through
                    case 58:
                        break;
                    case 15: {
                        return SEMICOLON;
                    }
                    // fall through
                    case 59:
                        break;
                    case 16: {
                        return OP_LT;
                    }
                    // fall through
                    case 60:
                        break;
                    case 17: {
                        return OP_ASSIGN;
                    }
                    // fall through
                    case 61:
                        break;
                    case 18: {
                        return OP_GT;
                    }
                    // fall through
                    case 62:
                        break;
                    case 19: {
                        return OP_THROW;
                    }
                    // fall through
                    case 63:
                        break;
                    case 20: {
                        return AT;
                    }
                    // fall through
                    case 64:
                        break;
                    case 21: {
                        return SYMBOL;
                    }
                    // fall through
                    case 65:
                        break;
                    case 22: {
                        return BRACKET_L;
                    }
                    // fall through
                    case 66:
                        break;
                    case 23: {
                        return BRACKET_R;
                    }
                    // fall through
                    case 67:
                        break;
                    case 24: {
                        return ACCENT;
                    }
                    // fall through
                    case 68:
                        break;
                    case 25: {
                        return BRACE_L;
                    }
                    // fall through
                    case 69:
                        break;
                    case 26: {
                        return BRACE_R;
                    }
                    // fall through
                    case 70:
                        break;
                    case 27: {
                        return OP_REF;
                    }
                    // fall through
                    case 71:
                        break;
                    case 28: {
                        return OP_ADD_ASSIGN;
                    }
                    // fall through
                    case 72:
                        break;
                    case 29: {
                        return OP_TO;
                    }
                    // fall through
                    case 73:
                        break;
                    case 30: {
                        return COMMENT_LINE;
                    }
                    // fall through
                    case 74:
                        break;
                    case 31: {
                        return OP_LEQ;
                    }
                    // fall through
                    case 75:
                        break;
                    case 32: {
                        return OP_GEQ;
                    }
                    // fall through
                    case 76:
                        break;
                    case 33: {
                        return KW_FN;
                    }
                    // fall through
                    case 77:
                        break;
                    case 34: {
                        return KW_WHILE;
                    }
                    // fall through
                    case 78:
                        break;
                    case 35: {
                        return KW_LET;
                    }
                    // fall through
                    case 79:
                        break;
                    case 36: {
                        return KW_MUTABLE;
                    }
                    // fall through
                    case 80:
                        break;
                    case 37: {
                        return KW_PUBLIC;
                    }
                    // fall through
                    case 81:
                        break;
                    case 38: {
                        return COMMENT_BLOCK;
                    }
                    // fall through
                    case 82:
                        break;
                    case 39: {
                        return KW_ENUM;
                    }
                    // fall through
                    case 83:
                        break;
                    case 40: {
                        return KW_PRIVATE;
                    }
                    // fall through
                    case 84:
                        break;
                    case 41: {
                        return KW_TEST;
                    }
                    // fall through
                    case 85:
                        break;
                    case 42: {
                        return KW_TYPE;
                    }
                    // fall through
                    case 86:
                        break;
                    case 43: {
                        return KW_TRAIT;
                    }
                    // fall through
                    case 87:
                        break;
                    case 44: {
                        return KW_STRUCT;
                    }
                    // fall through
                    case 88:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
