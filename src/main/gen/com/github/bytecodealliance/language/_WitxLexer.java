// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Witx.flex

package com.github.bytecodealliance.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.bytecodealliance.language.psi.WitxTypes.*;


public class _WitxLexer implements FlexLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0
    };

    /**
     * Top-level table for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();

    private static final String ZZ_CMAP_TOP_PACKED_0 =
            "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

    private static int[] zzUnpackcmap_top() {
        int[] result = new int[4352];
        int offset = 0;
        offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_top(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Second-level tables for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

    private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
            "\11\0\1\1\1\2\2\1\1\2\22\0\1\1\3\0" +
                    "\1\3\3\0\1\4\1\5\2\0\1\6\1\7\1\10" +
                    "\1\11\12\12\1\13\1\14\1\15\1\16\1\17\1\0" +
                    "\1\20\32\21\1\22\1\0\1\23\1\24\1\12\1\0" +
                    "\1\25\1\21\1\26\1\27\1\30\1\31\1\32\1\33" +
                    "\1\34\1\21\1\35\1\36\1\37\1\40\1\41\1\42" +
                    "\1\21\1\43\1\44\1\45\1\46\1\21\1\47\1\50" +
                    "\1\51\1\21\1\52\1\0\1\53\7\0\1\1\32\0" +
                    "\1\1\u01df\0\1\1\177\0\13\1\35\0\2\1\5\0" +
                    "\1\1\57\0\1\1\240\0\1\1\377\0";

    private static int[] zzUnpackcmap_blocks() {
        int[] result = new int[1280];
        int offset = 0;
        offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_blocks(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7" +
                    "\1\10\1\11\1\12\1\1\1\13\1\14\1\15\1\16" +
                    "\1\17\1\20\1\21\1\22\14\17\1\23\1\24\1\25" +
                    "\1\26\1\27\1\0\1\30\20\17\1\0\17\17\1\31" +
                    "\1\17\1\0\1\17\1\32\3\17\1\33\4\17\1\34" +
                    "\5\17\1\35\2\17\1\36\1\37\7\17\1\40\1\41" +
                    "\1\17\1\42\1\43\1\44\3\17\1\45\2\17\1\46" +
                    "\1\17\1\47\3\17\1\50\1\17\1\51\1\17\1\52";

    private static int[] zzUnpackAction() {
        int[] result = new int[125];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\54\0\130\0\204\0\54\0\54\0\54\0\260" +
                    "\0\54\0\54\0\54\0\334\0\54\0\54\0\54\0\u0108" +
                    "\0\u0134\0\54\0\54\0\54\0\u0160\0\u018c\0\u01b8\0\u01e4" +
                    "\0\u0210\0\u023c\0\u0268\0\u0294\0\u02c0\0\u02ec\0\u0318\0\u0344" +
                    "\0\54\0\54\0\204\0\54\0\u0370\0\u039c\0\u0134\0\u03c8" +
                    "\0\u03f4\0\u0420\0\u044c\0\u0478\0\u04a4\0\u04d0\0\u04fc\0\u0528" +
                    "\0\u0554\0\u0580\0\u05ac\0\u05d8\0\u0604\0\u0630\0\u065c\0\u0688" +
                    "\0\u06b4\0\u06e0\0\u070c\0\u0738\0\u0764\0\u0790\0\u07bc\0\u07e8" +
                    "\0\u0814\0\u0840\0\u086c\0\u0898\0\u08c4\0\u08f0\0\u091c\0\u0134" +
                    "\0\u0948\0\u0974\0\u09a0\0\u0134\0\u09cc\0\u09f8\0\u0a24\0\u0134" +
                    "\0\u0a50\0\u0a7c\0\u0aa8\0\u0ad4\0\u0134\0\u0b00\0\u0b2c\0\u0b58" +
                    "\0\u0b84\0\u0bb0\0\54\0\u0bdc\0\u0c08\0\u0134\0\u0134\0\u0c34" +
                    "\0\u0c60\0\u0c8c\0\u0cb8\0\u0ce4\0\u0d10\0\u0d3c\0\u0134\0\u0134" +
                    "\0\u0d68\0\u0134\0\u0134\0\u0134\0\u0d94\0\u0dc0\0\u0dec\0\u0134" +
                    "\0\u0e18\0\u0e44\0\u0134\0\u0e70\0\u0134\0\u0e9c\0\u0ec8\0\u0ef4" +
                    "\0\u0134\0\u0f20\0\u0134\0\u0f4c\0\u0134";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[125];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length() - 1;
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpacktrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11" +
                    "\1\12\1\2\1\13\1\14\1\15\1\16\1\17\1\20" +
                    "\1\21\1\22\1\23\1\24\1\25\1\26\1\21\1\27" +
                    "\1\30\1\21\1\31\1\32\1\21\1\33\3\21\1\34" +
                    "\1\35\1\21\1\36\1\37\1\40\2\21\1\41\1\42" +
                    "\55\0\2\3\63\0\1\43\6\0\1\43\3\0\25\43" +
                    "\21\0\1\44\50\0\1\45\106\0\1\46\16\0\1\21" +
                    "\6\0\1\21\3\0\25\21\14\0\1\21\6\0\1\21" +
                    "\3\0\17\21\1\47\5\21\14\0\1\21\6\0\1\21" +
                    "\3\0\14\21\1\50\10\21\14\0\1\21\6\0\1\21" +
                    "\3\0\13\21\1\51\7\21\1\52\1\21\14\0\1\21" +
                    "\6\0\1\21\3\0\7\21\1\53\1\21\1\54\7\21" +
                    "\1\55\3\21\14\0\1\21\6\0\1\21\3\0\1\56" +
                    "\24\21\14\0\1\21\6\0\1\21\3\0\12\21\1\57" +
                    "\1\60\11\21\14\0\1\21\6\0\1\21\3\0\7\21" +
                    "\1\61\15\21\14\0\1\21\6\0\1\21\3\0\1\62" +
                    "\24\21\14\0\1\21\6\0\1\21\3\0\3\21\1\63" +
                    "\21\21\14\0\1\21\6\0\1\21\3\0\24\21\1\64" +
                    "\14\0\1\21\6\0\1\21\3\0\13\21\1\65\3\21" +
                    "\1\66\5\21\14\0\1\21\6\0\1\21\3\0\14\21" +
                    "\1\67\10\21\2\0\2\45\1\0\51\45\34\0\1\70" +
                    "\31\0\1\21\6\0\1\21\3\0\13\21\1\71\11\21" +
                    "\14\0\1\21\6\0\1\21\3\0\21\21\1\72\3\21" +
                    "\14\0\1\21\6\0\1\21\3\0\15\21\1\73\7\21" +
                    "\14\0\1\21\6\0\1\21\3\0\3\21\1\74\21\21" +
                    "\14\0\1\21\6\0\1\21\3\0\1\75\24\21\14\0" +
                    "\1\21\6\0\1\21\3\0\13\21\1\76\11\21\14\0" +
                    "\1\21\6\0\1\21\3\0\13\21\1\77\11\21\14\0" +
                    "\1\21\6\0\1\21\3\0\15\21\1\100\7\21\14\0" +
                    "\1\21\6\0\1\21\3\0\1\21\1\101\16\21\1\102" +
                    "\4\21\14\0\1\21\6\0\1\21\3\0\17\21\1\103" +
                    "\5\21\14\0\1\21\6\0\1\21\3\0\1\21\1\104" +
                    "\23\21\14\0\1\21\6\0\1\21\3\0\1\21\1\105" +
                    "\23\21\14\0\1\21\6\0\1\21\3\0\15\21\1\106" +
                    "\7\21\14\0\1\21\6\0\1\21\3\0\7\21\1\107" +
                    "\15\21\14\0\1\21\6\0\1\21\3\0\3\21\1\110" +
                    "\21\21\14\0\1\21\6\0\1\21\3\0\16\21\1\111" +
                    "\6\21\47\0\1\112\20\0\1\21\6\0\1\21\3\0" +
                    "\17\21\1\113\5\21\14\0\1\21\6\0\1\21\3\0" +
                    "\12\21\1\114\12\21\14\0\1\21\6\0\1\21\3\0" +
                    "\14\21\1\115\10\21\14\0\1\21\6\0\1\21\3\0" +
                    "\11\21\1\116\13\21\14\0\1\21\6\0\1\21\3\0" +
                    "\5\21\1\117\17\21\14\0\1\21\6\0\1\21\3\0" +
                    "\1\21\1\120\23\21\14\0\1\21\6\0\1\21\3\0" +
                    "\2\21\1\121\22\21\14\0\1\21\6\0\1\21\3\0" +
                    "\14\21\1\122\10\21\14\0\1\21\6\0\1\21\3\0" +
                    "\11\21\1\123\13\21\14\0\1\21\6\0\1\21\3\0" +
                    "\3\21\1\124\21\21\14\0\1\21\6\0\1\21\3\0" +
                    "\20\21\1\125\4\21\14\0\1\21\6\0\1\21\3\0" +
                    "\10\21\1\126\14\21\14\0\1\21\6\0\1\21\3\0" +
                    "\14\21\1\127\10\21\14\0\1\21\6\0\1\21\3\0" +
                    "\3\21\1\130\21\21\14\0\1\21\6\0\1\21\3\0" +
                    "\14\21\1\131\10\21\14\0\1\21\6\0\1\21\3\0" +
                    "\11\21\1\132\13\21\52\0\1\133\15\0\1\21\6\0" +
                    "\1\21\3\0\20\21\1\134\4\21\14\0\1\21\6\0" +
                    "\1\21\3\0\16\21\1\135\6\21\14\0\1\21\6\0" +
                    "\1\21\3\0\2\21\1\136\22\21\14\0\1\21\6\0" +
                    "\1\21\3\0\17\21\1\137\5\21\14\0\1\21\6\0" +
                    "\1\21\3\0\11\21\1\140\13\21\14\0\1\21\6\0" +
                    "\1\21\3\0\16\21\1\141\6\21\14\0\1\21\6\0" +
                    "\1\21\3\0\21\21\1\142\3\21\14\0\1\21\6\0" +
                    "\1\21\3\0\16\21\1\143\6\21\14\0\1\21\6\0" +
                    "\1\21\3\0\1\144\24\21\14\0\1\21\6\0\1\21" +
                    "\3\0\16\21\1\145\6\21\14\0\1\21\6\0\1\21" +
                    "\3\0\13\21\1\146\11\21\14\0\1\21\6\0\1\21" +
                    "\3\0\13\21\1\147\11\21\14\0\1\21\6\0\1\21" +
                    "\3\0\2\21\1\150\22\21\14\0\1\21\6\0\1\21" +
                    "\3\0\16\21\1\151\6\21\14\0\1\21\6\0\1\21" +
                    "\3\0\20\21\1\152\4\21\14\0\1\21\6\0\1\21" +
                    "\3\0\3\21\1\153\21\21\14\0\1\21\6\0\1\21" +
                    "\3\0\20\21\1\154\4\21\14\0\1\21\6\0\1\21" +
                    "\3\0\2\21\1\155\22\21\14\0\1\21\6\0\1\21" +
                    "\3\0\4\21\1\156\20\21\14\0\1\21\6\0\1\21" +
                    "\3\0\5\21\1\157\17\21\14\0\1\21\6\0\1\21" +
                    "\3\0\2\21\1\160\22\21\14\0\1\21\6\0\1\21" +
                    "\3\0\1\161\24\21\14\0\1\21\6\0\1\21\3\0" +
                    "\21\21\1\162\3\21\14\0\1\21\6\0\1\21\3\0" +
                    "\3\21\1\163\21\21\14\0\1\21\6\0\1\21\3\0" +
                    "\1\164\24\21\14\0\1\21\6\0\1\21\3\0\3\21" +
                    "\1\165\21\21\14\0\1\21\6\0\1\21\3\0\12\21" +
                    "\1\166\12\21\14\0\1\21\6\0\1\21\3\0\1\21" +
                    "\1\167\23\21\14\0\1\21\6\0\1\21\3\0\1\21" +
                    "\1\170\23\21\14\0\1\21\6\0\1\21\3\0\3\21" +
                    "\1\171\21\21\14\0\1\21\6\0\1\21\3\0\20\21" +
                    "\1\172\4\21\14\0\1\21\6\0\1\21\3\0\3\21" +
                    "\1\173\21\21\14\0\1\21\6\0\1\21\3\0\14\21" +
                    "\1\174\10\21\14\0\1\21\6\0\1\21\3\0\16\21" +
                    "\1\175\6\21\2\0";

    private static int[] zzUnpacktrans() {
        int[] result = new int[3960];
        int offset = 0;
        offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpacktrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String[] ZZ_ERROR_MSG = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\1\11\2\1\3\11\1\1\3\11\1\1\3\11" +
                    "\2\1\3\11\14\1\2\11\1\1\1\11\1\1\1\0" +
                    "\21\1\1\0\21\1\1\0\20\1\1\11\42\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[125];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private CharSequence zzBuffer = "";

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * Number of newlines encountered up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    private int yyline;

    /**
     * Number of characters from the last newline up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    protected int yycolumn;

    /**
     * Number of characters up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    private long yychar;

    /**
     * Whether the scanner is currently at the beginning of a line.
     */
    @SuppressWarnings("unused")
    private boolean zzAtBOL = true;

    /**
     * Whether the user-EOF-code has already been executed.
     */
    @SuppressWarnings("unused")
    private boolean zzEOFDone;


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public _WitxLexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Returns the maximum size of the scanner buffer, which limits the size of tokens.
     */
    private int zzMaxBufferLen() {
        return Integer.MAX_VALUE;
    }

    /**
     * Whether the scanner buffer can grow to accommodate a larger token.
     */
    private boolean zzCanGrow() {
        return true;
    }

    /**
     * Translates raw input code points to DFA table row
     */
    private static int zzCMap(int input) {
        int offset = input & 255;
        return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false}, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position {@code pos} from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return null;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return BAD_CHARACTER;
                    }
                    // fall through
                    case 43:
                        break;
                    case 2: {
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 44:
                        break;
                    case 3: {
                        return DOLLAR;
                    }
                    // fall through
                    case 45:
                        break;
                    case 4: {
                        return PARENTHESIS_L;
                    }
                    // fall through
                    case 46:
                        break;
                    case 5: {
                        return PARENTHESIS_R;
                    }
                    // fall through
                    case 47:
                        break;
                    case 6: {
                        return COMMA;
                    }
                    // fall through
                    case 48:
                        break;
                    case 7: {
                        return HYPHEN;
                    }
                    // fall through
                    case 49:
                        break;
                    case 8: {
                        return DOT;
                    }
                    // fall through
                    case 50:
                        break;
                    case 9: {
                        return SLASH;
                    }
                    // fall through
                    case 51:
                        break;
                    case 10: {
                        return COLON;
                    }
                    // fall through
                    case 52:
                        break;
                    case 11: {
                        return ANGLE_L;
                    }
                    // fall through
                    case 53:
                        break;
                    case 12: {
                        return EQ;
                    }
                    // fall through
                    case 54:
                        break;
                    case 13: {
                        return ANGLE_R;
                    }
                    // fall through
                    case 55:
                        break;
                    case 14: {
                        return AT;
                    }
                    // fall through
                    case 56:
                        break;
                    case 15: {
                        return SYMBOL;
                    }
                    // fall through
                    case 57:
                        break;
                    case 16: {
                        return BRACKET_L;
                    }
                    // fall through
                    case 58:
                        break;
                    case 17: {
                        return BRACKET_R;
                    }
                    // fall through
                    case 59:
                        break;
                    case 18: {
                        return ACCENT;
                    }
                    // fall through
                    case 60:
                        break;
                    case 19: {
                        return BRACE_L;
                    }
                    // fall through
                    case 61:
                        break;
                    case 20: {
                        return BRACE_R;
                    }
                    // fall through
                    case 62:
                        break;
                    case 21: {
                        return REFERENCE;
                    }
                    // fall through
                    case 63:
                        break;
                    case 22: {
                        return TO;
                    }
                    // fall through
                    case 64:
                        break;
                    case 23: {
                        return COMMENT_LINE;
                    }
                    // fall through
                    case 65:
                        break;
                    case 24: {
                        return KW_AS;
                    }
                    // fall through
                    case 66:
                        break;
                    case 25: {
                        return KW_USE;
                    }
                    // fall through
                    case 67:
                        break;
                    case 26: {
                        return KW_ENUM;
                    }
                    // fall through
                    case 68:
                        break;
                    case 27: {
                        return KW_FUNCTION;
                    }
                    // fall through
                    case 69:
                        break;
                    case 28: {
                        return KW_LIST;
                    }
                    // fall through
                    case 70:
                        break;
                    case 29: {
                        return KW_WITX;
                    }
                    // fall through
                    case 71:
                        break;
                    case 30: {
                        return KW_FIELD;
                    }
                    // fall through
                    case 72:
                        break;
                    case 31: {
                        return KW_FLAGS;
                    }
                    // fall through
                    case 73:
                        break;
                    case 32: {
                        return KW_UNION;
                    }
                    // fall through
                    case 74:
                        break;
                    case 33: {
                        return KW_WORLD;
                    }
                    // fall through
                    case 75:
                        break;
                    case 34: {
                        return KW_EXPORT;
                    }
                    // fall through
                    case 76:
                        break;
                    case 35: {
                        return KW_HANDLE;
                    }
                    // fall through
                    case 77:
                        break;
                    case 36: {
                        return KW_IMPORT;
                    }
                    // fall through
                    case 78:
                        break;
                    case 37: {
                        return KW_RECORD;
                    }
                    // fall through
                    case 79:
                        break;
                    case 38: {
                        return KW_INCLUDE;
                    }
                    // fall through
                    case 80:
                        break;
                    case 39: {
                        return KW_PACKAGE;
                    }
                    // fall through
                    case 81:
                        break;
                    case 40: {
                        return KW_TYPE;
                    }
                    // fall through
                    case 82:
                        break;
                    case 41: {
                        return KW_INTERFACE;
                    }
                    // fall through
                    case 83:
                        break;
                    case 42: {
                        return KW_CONSTRUCTOR;
                    }
                    // fall through
                    case 84:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
